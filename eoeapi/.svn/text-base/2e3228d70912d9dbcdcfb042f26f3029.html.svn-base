{"title":"Fragments","text":"<p>\u8d1f\u8d23\u4eba\uff1asfshine \n<\/p><p>\u539f\u6587\u94fe\u63a5\uff1a<a rel=\"nofollow\" target=\"_blank\" class=\"external free\" href=\"http:\/\/docs.eoeandroid.com\/guide\/topics\/fundamentals\/fragments.html\">http:\/\/docs.eoeandroid.com\/guide\/topics\/fundamentals\/fragments.html<\/a> \n<\/p><p><br \/>\n<\/p>\n<table id=\"toc\" class=\"toc\"><tr><td><div id=\"toctitle\"><h2>\u76ee\u5f55<\/h2><\/div>\n<ul>\n<li class=\"toclevel-1 tocsection-1\"><a href=\"#Fragments.EF.BC.88.E7.A2.8E.E7.89.87.EF.BC.89\"><span class=\"tocnumber\">1<\/span> <span class=\"toctext\">Fragments\uff08\u788e\u7247\uff09<\/span><\/a>\n<ul>\n<li class=\"toclevel-2 tocsection-2\"><a href=\"#Design_Philosophy-.E8.AE.BE.E8.AE.A1.E7.90.86.E5.BF.B5\"><span class=\"tocnumber\">1.1<\/span> <span class=\"toctext\">Design Philosophy-\u8bbe\u8ba1\u7406\u5ff5<\/span><\/a><\/li>\n<li class=\"toclevel-2 tocsection-3\"><a href=\"#Creating_a_Fragment-.E5.88.9B.E5.BB.BA.E4.B8.80.E4.B8.AAFragment\"><span class=\"tocnumber\">1.2<\/span> <span class=\"toctext\">Creating a Fragment-\u521b\u5efa\u4e00\u4e2aFragment<\/span><\/a>\n<ul>\n<li class=\"toclevel-3 tocsection-4\"><a href=\"#Adding_a_user_interface-.E6.B7.BB.E5.8A.A0.E4.B8.80.E4.B8.AA.E7.94.A8.E6.88.B7.E6.8E.A5.E5.8F.A3\"><span class=\"tocnumber\">1.2.1<\/span> <span class=\"toctext\">Adding a user interface-\u6dfb\u52a0\u4e00\u4e2a\u7528\u6237\u63a5\u53e3<\/span><\/a><\/li>\n<li class=\"toclevel-3 tocsection-5\"><a href=\"#Adding_a_fragment_to_an_activity-.E7.BB.99.E4.B8.80.E4.B8.AAActivity.E6.B7.BB.E5.8A.A0.E4.B8.80.E4.B8.AAFragment\"><span class=\"tocnumber\">1.2.2<\/span> <span class=\"toctext\">Adding a fragment to an activity-\u7ed9\u4e00\u4e2aActivity\u6dfb\u52a0\u4e00\u4e2aFragment<\/span><\/a><\/li>\n<li class=\"toclevel-3 tocsection-6\"><a href=\"#Adding_a_fragment_without_a_UI-.E6.B7.BB.E5.8A.A0.E4.B8.80.E4.B8.AA.E6.B2.A1.E6.9C.89UI.E7.9A.84Fragment\"><span class=\"tocnumber\">1.2.3<\/span> <span class=\"toctext\">Adding a fragment without a UI-\u6dfb\u52a0\u4e00\u4e2a\u6ca1\u6709UI\u7684Fragment<\/span><\/a><\/li>\n<\/ul>\n<\/li>\n<li class=\"toclevel-2 tocsection-7\"><a href=\"#Managing_Fragments-.E7.AE.A1.E7.90.86fragment\"><span class=\"tocnumber\">1.3<\/span> <span class=\"toctext\">Managing Fragments-\u7ba1\u7406fragment<\/span><\/a><\/li>\n<li class=\"toclevel-2 tocsection-8\"><a href=\"#Performing_Fragment_Transactions-.E6.89.A7.E8.A1.8CFragment.E4.BA.8B.E5.8A.A1.\"><span class=\"tocnumber\">1.4<\/span> <span class=\"toctext\">Performing Fragment Transactions-\u6267\u884cFragment\u4e8b\u52a1.<\/span><\/a><\/li>\n<li class=\"toclevel-2 tocsection-9\"><a href=\"#Communicating_with_the_Activity-.E4.B8.8EActivity.E7.9A.84.E9.80.9A.E8.AE.AF\"><span class=\"tocnumber\">1.5<\/span> <span class=\"toctext\">Communicating with the Activity-\u4e0eActivity\u7684\u901a\u8baf<\/span><\/a><\/li>\n<li class=\"toclevel-2 tocsection-10\"><a href=\"#Creating_event_callbacks_to_the_activity-.E4.B8.BAActivity.E5.88.9B.E5.BB.BA.E6.97.B6.E9.97.B4.E5.9B.9E.E8.B0.83\"><span class=\"tocnumber\">1.6<\/span> <span class=\"toctext\">Creating event callbacks to the activity-\u4e3aActivity\u521b\u5efa\u65f6\u95f4\u56de\u8c03<\/span><\/a>\n<ul>\n<li class=\"toclevel-3 tocsection-11\"><a href=\"#Adding_items_to_the_Action_Bar-.E5.9C.A8Action_Bar.E4.B8.8A.E6.B7.BB.E5.8A.A0.E9.A1.B9.\"><span class=\"tocnumber\">1.6.1<\/span> <span class=\"toctext\">Adding items to the Action Bar-\u5728Action Bar\u4e0a\u6dfb\u52a0\u9879.<\/span><\/a><\/li>\n<\/ul>\n<\/li>\n<li class=\"toclevel-2 tocsection-12\"><a href=\"#Handling_the_Fragment_Lifecycle-.E5.A4.84.E7.90.86Fragment.E7.9A.84.E7.94.9F.E5.91.BD.E5.91.A8.E6.9C.9F\"><span class=\"tocnumber\">1.7<\/span> <span class=\"toctext\">Handling the Fragment Lifecycle-\u5904\u7406Fragment\u7684\u751f\u547d\u5468\u671f<\/span><\/a>\n<ul>\n<li class=\"toclevel-3 tocsection-13\"><a href=\"#Coordinating_with_the_activity_lifecycle-.E5.92.8CActivity.E7.94.9F.E5.91.BD.E5.91.A8.E6.9C.9F.E7.9A.84.E5.8D.8F.E8.B0.83\"><span class=\"tocnumber\">1.7.1<\/span> <span class=\"toctext\">Coordinating with the activity lifecycle-\u548cActivity\u751f\u547d\u5468\u671f\u7684\u534f\u8c03<\/span><\/a><\/li>\n<\/ul>\n<\/li>\n<\/ul>\n<\/li>\n<\/ul>\n<\/td><\/tr><\/table>\n<h1> <span class=\"mw-headline\" id=\"Fragments.EF.BC.88.E7.A2.8E.E7.89.87.EF.BC.89\">Fragments\uff08\u788e\u7247\uff09<\/span><\/h1>\n<p>\u4e00\u4e2a<a rel=\"nofollow\" target=\"_blank\" class=\"external text\" href=\"http:\/\/docs.eoeandroid.com\/reference\/android\/app\/Fragment.html\">\u788e\u7247<\/a>\u5728\u4e00\u4e2a\u6d3b\u52a8\u4e2d\u4ee3\u8868\u4e00\u4e2a\u884c\u4e3a\u6216\u7528\u6237\u754c\u9762\u7684\u4e00\u90e8\u5206\u3002 \u4f60\u53ef\u4ee5\u5728\u4e00\u4e2a\u5355\u4e00\u7684<a rel=\"nofollow\" target=\"_blank\" class=\"external text\" href=\"http:\/\/docs.eoeandroid.com\/reference\/android\/app\/Activity.html\">\u6d3b\u52a8<\/a>\u4e2d\u7ec4\u5408\u4f7f\u7528\u591a\u4e2a\u788e\u7247\u4ee5\u5efa\u7acb\u4e00\u4e2a\u591a\u7a97\u683c\u7684UI\uff0c\u5e76\u4e14\u53ef\u4ee5\u5728\u591a\u4e2a\u6d3b\u52a8\u4e2d\u91cd\u7528\u4e00\u4e2a\u788e\u7247\u3002\u4f60\u53ef\u4ee5\u8ba4\u4e3a\u662f\u4e00\u4e2a\u62e5\u6709\u72ec\u7acb\u751f\u547d\u5468\u671f\u3001\u80fd\u591f\u72ec\u7acb\u63a5\u53d7\u8f93\u5165\u4e8b\u4ef6\u3001\u5e76\u4e14\u53ef\u4ee5\u5728\u6d3b\u52a8\u8fd0\u884c\u65f6\u6dfb\u52a0\u6216\u79fb\u9664\u7684\u788e\u7247\u4f5c\u4e3a\u4e00\u4e2a\u6d3b\u52a8\u7684\u6a21\u5757\u5316\u90e8\u5206\uff08\u6709\u70b9\u50cf\u4e00\u4e2a\u4f60\u53ef\u4ee5\u5728\u4e0d\u540c\u6d3b\u52a8\u4e2d\u91cd\u7528\u7684\u5b50\u6d3b\u52a8\uff09\u3002\n<\/p><p>\u5728\u4e00\u4e2aActivity\u4e2d,\u4e00\u4e2aFragment\u4ee3\u8868\u4e00\u4e2a\u7528\u6237\u63a5\u53e3\u7684\u884c\u4e3a\u6216\u8005\u90e8\u5206\u884c\u4e3a.\u4f60\u53ef\u4ee5\u628a\u51e0\u4e2aFragment\u6df7\u5408\u5230\u4e00\u4e2aActivity\u4e2d,\u8fd9\u6837\u4f60\u5c31\u53ef\u4ee5\u521b\u5efa\u4e00\u4e2a\u591a\u4e2a\u9875\u9762\u7684UI\u5e76\u53ef\u4ee5\u5728\u591a\u4e2aActivity\u4e2d\u590d\u7528\u4e00\u4e2aFragment.\n<\/p><p>\u4e00\u4e2a\u788e\u7247\u5fc5\u987b\u603b\u662f\u5d4c\u5165\u5230\u4e00\u4e2a\u6d3b\u52a8\uff08activity\uff09\u4e2d\uff0c\u5e76\u4e14\u5b83\u7684\u751f\u547d\u5468\u671f\u76f4\u63a5\u53d7\u5230\u4f4f\u6d3b\u52a8\u5f97\u751f\u547d\u5468\u671f\u7684\u5f71\u54cd\u3002\u4f8b\u5982\uff1a\u5f53\u6d3b\u52a8\u6682\u505c\u6216\u9500\u6bc1\u65f6\u65f6\uff0c\u5b83\u91cc\u8fb9\u7684\u6240\u6709\u788e\u7247\u4e5f\u662f\u5982\u6b64\u3002\u7136\u800c\uff0c\u5f53\u4e00\u4e2a\u6d3b\u52a8\u8fd0\u884c\u65f6\uff0c\uff08\u5b83\u5728 resumed(\u91cd\u65b0\u5f00\u59cb)<a rel=\"nofollow\" target=\"_blank\" class=\"external text\" href=\"http:\/\/docs.eoeandroid.com\/guide\/components\/activities.html#Lifecycle\">\u751f\u547d\u5468\u671f\u72b6\u6001<\/a>\uff09\uff0c\u4f60\u53ef\u4ee5\u5355\u72ec\u7684\u64cd\u4f5c\u6bcf\u4e2a\u788e\u7247\uff0c\u4f8b\u5982\u6dfb\u52a0\u6216\u79fb\u9664\u5b83\u4eec\u3002\u5f53\u4f60\u6267\u884c\u4e86\u8fd9\u6837\u7684\u788e\u7247\u4e8b\u52a1\uff0c\u4f60\u4e5f\u53ef\u4ee5\u5c06\u5b83\u6dfb\u52a0\u5230\u4e00\u4e2a\u540e\u53f0\u5806\u6808\u6240\u7ba1\u7406\u7684\u6d3b\u52a8\u2014\u2014\u8be5\u6d3b\u52a8\u4e2d\u7684\u6bcf\u4e2a\u540e\u53f0\u5806\u6808\u6761\u76ee\u90fd\u8bb0\u5f55\u7740\u5df2\u53d1\u751f\u7684\u7247\u6bb5\u4e8b\u52a1\u3002\u540e\u53f0\u5806\u6808\u5141\u8bb8\u7528\u6237\u901a\u8fc7\u6309\u8fd4\u56de\u6309\u94ae\u9000\u4e00\u4e2a\u788e\u7247\u4e8b\u52a1\uff08\u5411\u540e\u5bfc\u822a\uff09\u3002\n<\/p><p>When you add a fragment as a part of your activity layout, it lives in a <a rel=\"nofollow\" target=\"_blank\" class=\"external text\" href=\"http:\/\/docs.eoeandroid.com\/reference\/android\/view\/ViewGroup.html\">ViewGroup<\/a> inside the activity's view hierarchy and the fragment defines its own view layout. You can insert a fragment into your activity layout by declaring the fragment in the activity's layout file, as a &lt;fragment&gt; element, or from your application code by adding it to an existing <a rel=\"nofollow\" target=\"_blank\" class=\"external text\" href=\"http:\/\/docs.eoeandroid.com\/reference\/android\/view\/ViewGroup.html\">ViewGroup<\/a>. However, a fragment is not required to be a part of the activity layout; you may also use a fragment without its own UI as an invisible worker for the activity.\n<\/p><p>\u5f53\u4f60\u589e\u52a0\u4e00\u4e2aFragment\u6765\u4f5c\u4e3aActivity\u754c\u9762\u5e03\u5c40\u7684\u4e00\u90e8\u5206\u65f6,\u4ed6\u5b58\u5728\u5728Activity\u89c6\u56fe\u5c42\u91cc\u9762\u7684\u4e00\u4e2aViewGroup\u4e2d,\u8fd9\u4e2aFragment\u5b9a\u4e49\u4e86\u81ea\u5df1\u7684\u89c6\u56fe.\u4f60\u53ef\u4ee5\u901a\u8fc7\u5728Activity\u7684\u5e03\u5c40\u6587\u4ef6\u4e2d\u7528&lt;fragment&gt;\u58f0\u660e\u8fd9\u4e2afragment\u6765\u628a\u8fd9\u4e2afragment\u63d2\u5165\u4f60\u7684activity\u4e2d,\u6216\u8005\u4f60\u53ef\u4ee5\u5728\u5e94\u7528\u7684\u4ee3\u7801\u4e2d\u628a\u4ed6\u6dfb\u52a0\u6dfb\u52a0\u5230\u4e00\u4e2a\u73b0\u5b58\u7684ViewGroup\u4e2d.\u7136\u800c,Fragment\u4e0d\u5fc5\u662f\u4e00\u4e2aactivity\u5e03\u5c40\u7684\u4e00\u90e8\u5206,\u4f60\u53ef\u4ee5\u4f7f\u7528\u4e00\u4e2aFragment\u800c\u4e0d\u5b9e\u7528\u4ed6\u7684UI,\u8fd9\u6837\u53ef\u4ee5\u8ba9Fragment\u4f5c\u4e3aActivity\u7684\u4e00\u4e2a\u4e0d\u53ef\u89c1\u90e8\u5206\u6765\u5de5\u4f5c.\n<\/p><p><br \/>\nThis document describes how to build your application to use fragments, including how fragments can maintain their state when added to the activity's back stack, share events with the activity and other fragments in the activity, contribute to the activity's action bar, and more.\n<\/p><p>\u8fd9\u4e2a\u6587\u6863\u4ecb\u7ecd\u4e86\u589e\u52a0\u4f7f\u7528Fragment\u521b\u5efa\u4f60\u7684\u5e94\u7528,\u5305\u62ec\u600e\u6837\u4f7ffragment\u5728\u589e\u52a0\u5230\u8fd4\u56de\u6808\u7684\u65f6\u5019\u4fdd\u6301\u4ed6\u4eec\u7684\u72b6\u6001,\u548cactivity\u4ee5\u53ca\u8be5activity\u7684\u5176\u4ed6fragment\u7684\u5171\u4eab\u4e8b\u4ef6,\u7ec4\u6210Activity\u7684ActionBar,\u7b49\u7b49.\n<\/p><p><br \/>\n<\/p>\n<h2> <span class=\"mw-headline\" id=\"Design_Philosophy-.E8.AE.BE.E8.AE.A1.E7.90.86.E5.BF.B5\">Design Philosophy-\u8bbe\u8ba1\u7406\u5ff5<\/span><\/h2>\n<p>Android introduced fragments in Android 3.0 (API level 11), primarily to support more dynamic and flexible UI designs on large screens, such as tablets. Because a tablet's screen is much larger than that of a handset, there's more room to combine and interchange UI components. Fragments allow such designs without the need for you to manage complex changes to the view hierarchy. By dividing the layout of an activity into fragments, you become able to modify the activity's appearance at runtime and preserve those changes in a back stack that's managed by the activity.\n<\/p><p>Android\u5728Android3.0(API\u7b49\u7ea711)\u4e2d\u5f15\u5165\u4e86Fragment,\u4e3b\u8981\u662f\u4e3a\u4e86\u5728\u5927\u5c4f\u5e55\u4e0a(\u6bd4\u5982\u5e73\u677f)\u652f\u6301\u66f4\u591a\u52a8\u6001\u7684\u7075\u6d3b\u7684UI\u8bbe\u8ba1.\u56e0\u4e3a\u5e73\u677f\u7684\u5c4f\u5e55\u6bd4\u5176\u4ed6\u624b\u6301\u8bbe\u5907\u5927\u591a\u4e86,\u6709\u66f4\u591a\u7684\u7a7a\u95f4\u6765\u7ec4\u5408,\u4ea4\u6362UI\u7ec4\u4ef6.Fragment\u4f7f\u4f60\u5728View\u5c42\u4e0d\u5fc5\u8fdb\u884c\u5f88\u590d\u6742\u53d8\u5316\u5c31\u53ef\u4ee5\u5c31\u53ef\u4ee5\u5b9e\u73b0\u8fd9\u4e9b\u8bbe\u8ba1.\u901a\u8fc7\u628aActivity\u7684\u5e03\u5c40\u5206\u89e3\u6210\u5f88\u591aFragment,\u4f60\u53ef\u4ee5\u5728\u8fd0\u884c\u65f6\u6539\u52a8activity\u7684\u754c\u9762\u5e76\u4e14\u53ef\u4ee5\u628a\u8fd9\u4e9b\u53d8\u5316\u4fdd\u5b58\u5728activity\u7ba1\u7406\u7684\u8fd4\u56de\u6808\u4e2d.\n<\/p><p><br \/>\nFor example, a news application can use one fragment to show a list of articles on the left and another fragment to display an article on the right\u2014both fragments appear in one activity, side by side, and each fragment has its own set of lifecycle callback methods and handle their own user input events. Thus, instead of using one activity to select an article and another activity to read the article, the user can select an article and read it all within the same activity, as illustrated in the tablet layout in figure 1.\n<\/p><p>\u6bd4\u5982,\u4e00\u4e2a\u65b0\u95fb\u5e94\u7528\u53ef\u4ee5\u4f7f\u7528\u4e00\u4e2aFragment\u5728\u5de6\u8fb9\u663e\u793a\u4e00\u5217\u6587\u7ae0\u6807\u9898\u800c\u5728\u5de6\u8fb9\u7684\u53e6\u4e00\u4e2aFragment\u663e\u793a\u6587\u7ae0\u8be6\u7ec6\u5185\u5bb9.\u8fd9\u4e24\u4e2aFragment\u90fd\u5728\u540c\u4e00\u4e2aActivity\u4e2d,\u4ed6\u4eec\u5e76\u6392\u7740,\u6bcf\u4e2aFragment\u6709\u4ed6\u81ea\u5df1\u7684\u751f\u547d\u5468\u671f\u56de\u8c03\u65b9\u6cd5,\u5904\u7406\u4ed6\u4eec\u5404\u81ea\u7684\u8f93\u5165\u4e8b\u4ef6.\u90a3\u4e48,\u4e0d\u9700\u8981\u5728\u4e00\u4e2aactivity\u4e2d\u9009\u62e9\u5728\u53e6\u4e00\u4e2aactivity\u4e2d\u9605\u8bfb,\u7528\u6237\u53ef\u4ee5\u9009\u62e9\u4e00\u7bc7\u6587\u7ae0\u5728\u540c\u4e00\u4e2aactivity\u4e2d\u9605\u8bfb\u8fd9\u4e2a\u65b0\u95fb\u7684\u5185\u5bb9.\u5982\u56fe1\u6240\u793a:\n<\/p><p><br \/>\nYou should design each fragment as a modular and reusable activity component. That is, because each fragment defines its own layout and its own behavior with its own lifecycle callbacks, you can include one fragment in multiple activities, so you should design for reuse and avoid directly manipulating one fragment from another fragment. This is especially important because a modular fragment allows you to change your fragment combinations for different screen sizes. When designing your application to support both tablets and handsets, you can reuse your fragments in different layout configurations to optimize the user experience based on the available screen space. For example, on a handset, it might be necessary to separate fragments to provide a single-pane UI when more than one cannot fit within the same activity.\n<\/p><p>\u4f60\u5e94\u8be5\u628afragment\u8bbe\u8ba1\u6210\u6a21\u5757\u5316\u7684,\u53ef\u590d\u7528\u7684Activity\u7ec4\u4ef6.\u5c31\u662f\u8bf4,\u6bcf\u4e2aFragment\u5b9a\u4e49\u4e86\u4ed6\u81ea\u5df1\u7684\u5e03\u5c40\u548c\u4ed6\u81ea\u5df1\u7684,\u62e5\u6709\u81ea\u5df1\u751f\u547d\u5468\u671f\u56de\u8c03\u7684\u884c\u4e3a,\u4f60\u53ef\u4ee5\u5728\u591a\u4e2aactivity\u4e2d\u5305\u542b\u4e00\u4e2aFragment,\u6240\u4ee5\u4f60\u5e94\u8be5\u628aFragment\u8bbe\u8ba1\u6210\u53ef\u4ee5\u590d\u7528\u7684,\u5e76\u4e14\u9700\u8981\u907f\u514d\u4ece\u4e00\u4e2afragment\u76f4\u63a5\u64cd\u7eb5\u53e6\u4e00\u4e2afragment.\u8fd9\u4e00\u70b9\u662f\u975e\u5e38\u91cd\u8981\u7684\u56e0\u4e3a\u4e00\u4e2afragment\u6a21\u5757\u5141\u8bb8\u4f60\u9488\u5bf9\u4e0d\u540c\u7684\u5c4f\u5e55\u5c3a\u5bf8\u53d8\u5316\u4f60\u7684fragment\u7ec4\u5408\u5f62\u5f0f.\u5728\u8bbe\u8ba1\u5e94\u7528\u6765\u652f\u6301\u5e73\u677f\u548c\u624b\u6301\u8bbe\u5907\u65f6,\u4f60\u53ef\u4ee5\u5728\u4e0d\u540c\u7684\u5e03\u5c40\u914d\u7f6e\u4e2d\u91cd\u7528\u4f60\u7684fragment\u6765\u9488\u5bf9\u5c4f\u5e55\u7a7a\u95f4\u4f18\u5316\u7528\u6237\u4f53\u9a8c.\u6bd4\u5982,\u5728\u4e00\u4e2a\u624b\u6301\u8bbe\u5907\u4e0a,\u53ef\u80fd\u9700\u8981\u5206\u5f00\u7684fragment\u6765\u63d0\u4f9b\u4e00\u4e2a\u5355\u72ec\u7a97\u53e3UI\u800c\u4e0d\u662f\u4f7f\u5f88\u591afragment\u5728\u540c\u4e00\u4e2aactivity\u4e2d\u653e\u4e0d\u5f00.\n<\/p><p><img src=\"http:\/\/docs.eoeandroid.com\/images\/fundamentals\/fragments.png\" alt=\"fragments.png\" \/>\n<\/p><p>Figure 1. An example of how two UI modules defined by fragments can be combined into one activity for a tablet design, but separated for a handset design.\n<\/p><p>\u56fe\u4f8b1 \u5e73\u677f\u4e0a,\u5728\u4e00\u4e2aactivity\u4e2dFragment\u600e\u4e48\u5b9a\u4e49\u4e24\u4e2aUI\u6a21\u5757,\u4f46\u662f\u5728\u624b\u6301\u8bbe\u5907\u4e0a\u4ed6\u4eec\u5c06\u5206\u5f00.\n<\/p><p>For example\u2014to continue with the news application example\u2014the application can embed two fragments in Activity A, when running on a tablet-sized device. However, on a handset-sized screen, there's not enough room for both fragments, so Activity A includes only the fragment for the list of articles, and when the user selects an article, it starts Activity B, which includes the second fragment to read the article. Thus, the application supports both tablets and handsets by reusing fragments in different combinations, as illustrated in figure 1.\n<\/p><p>\u7ee7\u7eed\u4ee5\u4e0a\u9762\u7684\u65b0\u95fb\u4e3a\u4f8b,\u5f53\u5728\u5e73\u677f\u5927\u5c0f\u7684\u8bbe\u5907\u4e0a\u8fd0\u884c\u7684\u65f6\u5019,\u8fd9\u4e2a\u5e94\u7528\u53ef\u4ee5\u5728Activity\u4e2d\u5d4c\u5165\u4e24\u4e2aFragment.\u7136\u800c,\u5728\u624b\u6301\u8bbe\u5907\u4e0a\u7684\u65f6\u5019,\u7531\u4e8e\u6ca1\u6709\u8db3\u591f\u7684\u7a7a\u95f4\u76db\u653e\u8fd9\u4e24\u4e2afragment,\u6240\u4ee5ActivityA\u53ea\u663e\u793a\u4e86\u5176\u4e2d\u7684\u4e00\u4e2aFragment(\u65b0\u95fb\u5217\u8868),\u5f53\u7528\u6237\u9009\u62e9\u65b0\u95fb\u6807\u9898\u7684\u65f6\u5019,\u4ed6\u8df3\u8f6c\u5230ActvityB,ActivityB\u4e2d\u663e\u793a\u7b2c\u4e8c\u4e2aFragment(\u65b0\u95fb\u8be6\u7ec6\u4fe1\u606f).\u90a3\u4e48\u901a\u8fc7\u590d\u7528\u4e0d\u540c\u7ec4\u5408\u7684Fragment\u8fd9\u4e2a\u5e94\u7528\u5c31\u53ef\u4ee5\u540c\u65f6\u652f\u6301\u5e73\u677f\u548c\u624b\u6301\u8bbe\u5907\u4e86,\u5982\u56fe1.\n<\/p><p><br \/>\nFor more information about designing your application with different fragment combinations for different screen configurations, see the guide to Supporting Tablets and Handsets.\n<\/p><p>\u66f4\u591a\u5173\u4e8e\u4f7f\u7528\u4e0d\u540c\u7684Fragment\u7ec4\u5408\u6765\u8bbe\u8ba1\u9002\u5e94\u4e0d\u540c\u5c4f\u5e55\u5e94\u7528\u7684\u4fe1\u606f,\u8bf7\u53c2\u9605Supporting Tablets and Handsets\u4e00\u7ae0.\n<\/p><p><br \/>\n<\/p>\n<h2> <span class=\"mw-headline\" id=\"Creating_a_Fragment-.E5.88.9B.E5.BB.BA.E4.B8.80.E4.B8.AAFragment\">Creating a Fragment-\u521b\u5efa\u4e00\u4e2aFragment<\/span><\/h2>\n<p>To create a fragment, you must create a subclass of Fragment (or an existing subclass of it). The Fragment class has code that looks a lot like an Activity. It contains callback methods similar to an activity, such as onCreate(), onStart(), onPause(), and onStop(). In fact, if you're converting an existing Android application to use fragments, you might simply move code from your activity's callback methods into the respective callback methods of your fragment.\n<\/p><p>\u521b\u5efa\u4e00\u4e2aFragment,\u4f60\u5e94\u8be5\u521b\u5efa\u4e00\u4e2aFragment\u7684\u5b50\u7c7b(\u6216\u8005\u4ed6\u7684\u4e00\u4e2a\u73b0\u6709\u5b50\u7c7b).Fragment\u7c7b\u7684\u4ee3\u7801\u5f88\u50cfActivity.\u5b83\u8fd8\u6709\u548cactivity\u76f8\u4f3c\u7684\u56de\u8c03\u65b9\u6cd5,\u6bd4\u5982onCreate(), onStart(), onPause(), \u548c onStop().\u5b9e\u9645\u4e0a,\u5982\u679c\u4f60\u5728\u4f7f\u7528Fragment\u6765\u8f6c\u6362\u4e00\u4e2a\u73b0\u6210\u7684\u5e94\u7528,\u4f60\u53ef\u80fd\u53ea\u662f\u7b80\u5355\u7684\u4ece\u4f60\u7684activity\u56de\u8c03\u65b9\u6cd5\u4e2d\u79fb\u52a8\u4ee3\u7801\u5230fragment\u76f8\u5e94\u7684\u56de\u8c03\u65b9\u6cd5\u4e2d.\n<\/p><p><br \/>\nUsually, you should implement at least the following lifecycle methods:\n\u4e00\u822c\u7684,\u4f60\u81f3\u5c11\u5e94\u8be5\u5b9e\u73b0\u4e0b\u9762\u7684\u751f\u547d\u5468\u671f\u65b9\u6cd5:\n<\/p><p>onCreate()\n<\/p>\n<dl><dd>The system calls this when creating the fragment. Within your implementation, you should initialize essential components of the fragment that you want to retain when the fragment is paused or stopped, then resumed.\n<\/dd><\/dl>\n<dl><dd>\u521b\u5efafragment\u7684\u65f6\u5019,\u7cfb\u7edf\u4f1a\u8c03\u7528\u8fd9\u4e2a\u65b9\u6cd5.\u5728\u4f60\u5b9e\u73b0\u8fc7\u7a0b\u4e2d,\u5f53fragment\u6682\u505c(pause),\u505c\u6b62(stop)\u7136\u540e\u6062\u590d(resume)\u65f6,\u4f60\u5e94\u8be5\u521d\u59cb\u5316\u4f60\u60f3\u8981\u4fdd\u6301\u7684,fragment\u7684\u5fc5\u8981\u7684\u7ec4\u4ef6.\n<\/dd><\/dl>\n<p>onCreateView()\n<\/p>\n<dl><dd>The system calls this when it's time for the fragment to draw its user interface for the first time. To draw a UI for your fragment, you must return a View from this method that is the root of your fragment's layout. You can return null if the fragment does not provide a UI.\n<\/dd><\/dl>\n<dl><dd>\u5728fragment\u7b2c\u4e00\u6b21\u7ed8\u5236\u4ed6\u7684\u7528\u6237\u754c\u9762\u7684\u65f6\u5019\u7cfb\u7edf\u4f1a\u8c03\u7528\u8fd9\u4e2a\u65b9\u6cd5.\u5982\u679c\u4f60\u60f3\u4e3a\u4f60\u7684fragment\u7ed8\u5236\u754c\u9762,\u4f60\u5fc5\u987b\u4ece\u8fd9\u4e2a\u65b9\u6cd5\u4e2d\u8fd4\u56de\u4e00\u4e2aView,\u8fd9\u4e2aView\u662f\u4f60fragment\u5e03\u5c40\u7684\u57fa\u7840.\u5982\u679c\u8fd9\u4e2aFragment\u4e0d\u63d0\u4f9bUI,\u4f60\u53ef\u4ee5\u8fd4\u56de\u7a7a.\n<\/dd><\/dl>\n<p>onPause()\n<\/p>\n<dl><dd>The system calls this method as the first indication that the user is leaving the fragment (though it does not always mean the fragment is being destroyed). This is usually where you should commit any changes that should be persisted beyond the current user session (because the user might not come back).\n<\/dd><\/dl>\n<dl><dd>\u7cfb\u7edf\u8c03\u7528\u8fd9\u4e2a\u65b9\u6cd5\u4f5c\u4e3a\u7528\u6237\u79bb\u5f00\u8fd9\u4e2afragment\u7684\u7b2c\u4e00\u6807\u5fd7(\u867d\u7136\u8fd9\u4e0d\u603b\u662f\u610f\u5473\u7740\u8fd9\u4e2aFragment\u88ab\u6467\u6bc1\u4e86).\u901a\u5e38\u662f\u4f60\u9700\u8981\u505a\u4e00\u4e9b\u6539\u53d8,\u8fd9\u4e9b\u6539\u53d8\u8d85\u51fa\u4e86\u5f53\u524d\u7684\u7528\u6237\u4f1a\u8bdd(\u56e0\u4e3a\u7528\u6237\u6709\u53ef\u80fd\u4e0d\u4f1a\u56de\u5230\u8fd9\u4e2a\u754c\u9762\u6765).\n<\/dd><\/dl>\n<p>Most applications should implement at least these three methods for every fragment, but there are several other callback methods you should also use to handle various stages of the fragment lifecycle. All the lifecycle callback methods are discussed more later, in the section about Handling the Fragment Lifecycle.\n<\/p><p><br \/>\nThere are also a few subclasses that you might want to extend, instead of the base Fragment class:\n<\/p><p>\u4e5f\u6709\u6709\u4e9b\u5b50\u7c7b(\u4e0d\u662f\u57fa\u672c\u7684Fragment\u7c7b)\u4f60\u53ef\u80fd\u60f3\u8981\u7ee7\u627f\u6765\u5b9e\u73b0Fragment:\n<\/p><p>DialogFragment\n<\/p>\n<dl><dd>Displays a floating dialog. Using this class to create a dialog is a good alternative to using the dialog helper methods in the Activity class, because you can incorporate a fragment dialog into the back stack of fragments managed by the activity, allowing the user to return to a dismissed fragment.\n<\/dd><\/dl>\n<dl><dd>\u663e\u793a\u4e00\u4e2a\u6d6e\u52a8\u7684\u5bf9\u8bdd\u6846.\u4f7f\u7528\u8fd9\u4e2a\u7c7b\u6765\u521b\u5efa\u4e00\u4e2a\u5bf9\u8bdd\u6846\u662f\u548c\u4f7f\u7528\u5bf9\u8bddHelper\u65b9\u6cd5\u5728Activity\u7c7b\u4e2d\u521b\u5efa\u5bf9\u8bdd\u6846\u90fd\u662f\u5f88\u597d\u7684\u65b9\u6cd5,\u56e0\u4e3a\u4f60\u53ef\u4ee5\u628aFragment\u5bf9\u8bdd\u6846\u5305\u542b\u5728activity\u7ba1\u7406\u7684Fragment\u8fd4\u56de\u6808\u4e2d,\u5141\u8bb8\u7528\u6237\u8fd4\u56de\u5230\u5173\u95ed\u7684Fragment\u4e2d.\n<\/dd><\/dl>\n<p>ListFragment\n<\/p>\n<dl><dd>Displays a list of items that are managed by an adapter (such as a SimpleCursorAdapter), similar to ListActivity. It provides several methods for managing a list view, such as the onListItemClick() callback to handle click events.\n<\/dd><\/dl>\n<dl><dd>\u5c55\u793a\u4e00\u5217\u88abadapter(\u6bd4\u5982SimpleCursorAdapter)\u7ba1\u7406\u7684\u9879,\u548cListActivity\u5f88\u76f8\u4f3c.\u5b83\u63d0\u4f9b\u4e86\u4e00\u4e9b\u7ba1\u7406\u4e00\u4e2a\u5217\u8868\u89c6\u56fe\u7684\u65b9\u6cd5,\u6bd4\u5982\u5904\u7406\u70b9\u51fb\u4e8b\u4ef6\u7684onListItemClick()\u65b9\u6cd5.\n<\/dd><\/dl>\n<p>PreferenceFragment\n<\/p>\n<dl><dd>Displays a hierarchy of Preference objects as a list, similar to PreferenceActivity. This is useful when creating a \"settings\" activity for your application.\n<\/dd><\/dl>\n<dl><dd>\u7528\u4e00\u4e2a\u5217\u8868\u6765\u663e\u793a\u4e00\u7ec4\u504f\u597d\u8bbe\u7f6e\u5bf9\u8c61,\u7c7b\u4f3c\u4e8ePreferenceActivity. \u5728\u521b\u5efa\u8bbe\u7f6e\u578b\u7684activity\u65f6\u4f1a\u7528\u5230.\n<\/dd><\/dl>\n<p><img src=\"http:\/\/docs.eoeandroid.com\/images\/fragment_lifecycle.png\" alt=\"fragment_lifecycle.png\" \/>\n<\/p><p>Figure 2. The lifecycle of a fragment (while its activity is running).\n<\/p><p>\u56fe2 Fragment\u7684\u751f\u547d\u5468\u671f.\n<\/p>\n<h3> <span class=\"mw-headline\" id=\"Adding_a_user_interface-.E6.B7.BB.E5.8A.A0.E4.B8.80.E4.B8.AA.E7.94.A8.E6.88.B7.E6.8E.A5.E5.8F.A3\">Adding a user interface-\u6dfb\u52a0\u4e00\u4e2a\u7528\u6237\u63a5\u53e3<\/span><\/h3>\n<p>A fragment is usually used as part of an activity's user interface and contributes its own layout to the activity.\n<\/p><p>\u4e00\u4e2aFragment\u7ecf\u5e38\u88ab\u7528\u4f5cactivity\u754c\u9762\u7684\u4e00\u90e8\u5206,\u4e3aactivity\u8d21\u732e\u81ea\u5df1\u7684\u754c\u9762.\n<\/p><p><br \/>\nTo provide a layout for a fragment, you must implement the onCreateView() callback method, which the Android system calls when it's time for the fragment to draw its layout. Your implementation of this method must return a View that is the root of your fragment's layout.\n<\/p><p>\u4e3a\u4e86\u7ed9fragment\u63d0\u4f9b\u4e00\u4e2a\u5e03\u5c40,\u4f60\u5fc5\u987b\u5b9e\u73b0onCreateView()\u65b9\u6cd5,Android\u7cfb\u7edf\u5728Fragment\u7ed8\u5236\u4ed6\u7684\u754c\u9762\u7684\u65f6\u5019\u8c03\u7528\u8fd9\u4e2a\u65b9\u6cd5.\u4f60\u5bf9\u8fd9\u4e2a\u65b9\u6cd5\u7684\u5b9e\u73b0\u5fc5\u987b\u8fd4\u56de\u4e00\u4e2aView,\u8fd9\u4e2aView\u662f\u4f60Fragment\u5e03\u5c40\u7684\u57fa\u7840.\n<\/p>\n<div style=\"margin: 1em 0; padding: 10px; overflow: auto; background: #F7F7F7; border-left:4px solid; border-color:#258AAF;\">\n<p>Note: If your fragment is a subclass of ListFragment, the default implementation returns a ListView from onCreateView(), so you don't need to implement it.\n\u6ce8\u610f:\u5982\u679c\u4f60\u7684Fragment\u662f\u4e00\u4e2aListFragment\u7c7b\u7684\u5b50\u7c7b,\u9ed8\u8ba4\u4f1a\u4eceonCreateView()\u8fd4\u56de\u4e00\u4e2aListview,\u6240\u4ee5\u4f60\u4e0d\u9700\u8981\u5b9e\u73b0\u5b83.\n<\/p>\n<\/div>\n<p>To return a layout from onCreateView(), you can inflate it from a layout resource defined in XML. To help you do so, onCreateView() provides a LayoutInflater object.\n<\/p><p>\u4e3a\u4e86\u4eceonCreateView()\u65b9\u6cd5\u8fd4\u56de\u4e00\u4e2a\u5e03\u5c40,\u4f60\u53ef\u4ee5\u7528\u4e00\u4e2axml\u5e03\u5c40\u6587\u4ef6\u6765\u586b\u5145\u5b83.\u4e3a\u4e86\u5e2e\u52a9\u4f60\u505a\u8fd9\u4e2a\u4e8b\u60c5,onCreateView() \u65b9\u6cd5\u63d0\u4f9b\u4e86\u4e00\u4e2aLayoutInflater\u5bf9\u8c61.\n<\/p><p><br \/>\nFor example, here's a subclass of Fragment that loads a layout from the example_fragment.xml file:\n<\/p><p>\u6bd4\u5982,\u8fd9\u4e2a\u4e00\u4e2aFragment\u7684\u5b50\u7c7b,\u4ed6\u662f\u4eceexample_fragment.xml\u6587\u4ef6\u8f7d\u5165\u7684\u5e03\u5c40:\n<\/p>\n<pre class=\"java\">&#160;\n<span style=\"color: #000000; font-weight: bold;\">public<\/span> <span style=\"color: #000000; font-weight: bold;\">static<\/span> <span style=\"color: #000000; font-weight: bold;\">class<\/span> ExampleFragment <span style=\"color: #000000; font-weight: bold;\">extends<\/span> Fragment <span style=\"color: #66cc66;\">&#123;<\/span>\n    @Override\n    <span style=\"color: #000000; font-weight: bold;\">public<\/span> <a href=\"http:\/\/www.google.com\/search?hl=en&amp;q=allinurl%3AView+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span style=\"color: #aaaadd; font-weight: bold;\">View<\/span><\/a> onCreateView<span style=\"color: #66cc66;\">&#40;<\/span>LayoutInflater inflater, ViewGroup container,\n                             Bundle savedInstanceState<span style=\"color: #66cc66;\">&#41;<\/span> <span style=\"color: #66cc66;\">&#123;<\/span>\n        <span style=\"color: #808080; font-style: italic;\">\/\/ Inflate the layout for this fragment<\/span>\n        <span style=\"color: #000000; font-weight: bold;\">return<\/span> inflater.<span style=\"color: #006600;\">inflate<\/span><span style=\"color: #66cc66;\">&#40;<\/span>R.<span style=\"color: #006600;\">layout<\/span>.<span style=\"color: #006600;\">example_fragment<\/span>, container, <span style=\"color: #000000; font-weight: bold;\">false<\/span><span style=\"color: #66cc66;\">&#41;<\/span>;\n    <span style=\"color: #66cc66;\">&#125;<\/span>\n<span style=\"color: #66cc66;\">&#125;<\/span>\n&#160;<\/pre>\n<div style=\"margin: 1em 0; padding: 10px; overflow: auto; background: #F7F7F7; border-left:4px solid; border-color:#33FF00;\">\n<p>Creating a layout-\u521b\u5efa\u4e00\u4e2a\u5e03\u5c40\n<\/p><p>In the sample above, R.layout.example_fragment is a reference to a layout resource named example_fragment.xml saved in the application resources. For information about how to create a layout in XML, see the User Interface documentation.\n<\/p><p>\u548c\u4e0a\u9762\u5dee\u4e0d\u591a,R.layout.example_fragment\u662f\u5728\u7cfb\u7edf\u4fdd\u5b58\u7684example_fragment.xml\u8fd9\u4e2a\u5e03\u5c40\u8d44\u6e90\u7684\u5f15\u7528.\u66f4\u591a\u5173\u4e8e\u4f7f\u7528\u4e00\u4e2axml\u6587\u4ef6\u521b\u5efa\u4e00\u4e2a\u5e03\u5c40\u7684\u4fe1\u606f,\u53c2\u8003User Interface \u6587\u6863.\n<\/p>\n<\/div>\n<p>The container parameter passed to onCreateView() is the parent ViewGroup (from the activity's layout) in which your fragment layout will be inserted. The savedInstanceState parameter is a Bundle that provides data about the previous instance of the fragment, if the fragment is being resumed (restoring state is discussed more in the section about Handling the Fragment Lifecycle).\n<\/p><p>\u4f20\u9012\u7ed9onCreateView()\u7684\u5bb9\u5668\u53c2\u6570\u662ffragment\u9501\u63d2\u5165\u7684activity\u7684\u7236ViewGroup(\u6765\u81ea\u5bf9\u5e94\u7684activity\u5e03\u5c40).savedInstanceState\u7684\u53c2\u6570\u662f\u4e00\u4e2a\u63d0\u4f9b\u5173\u4e8e\u4e4b\u524dFragment\u72b6\u6001\u6570\u636e\u7684Bundle,\u5982\u679c\u8fd9\u4e2aFragment\u88ab\u6062\u590d\u4e86(resume,\u6062\u590d\u6570\u636e\u5728\u5904\u7406Fragment\u751f\u547d\u5468\u671f\u8fd9\u4e00\u8282\u6709\u66f4\u591a\u4ecb\u7ecd)\n<\/p><p><br \/>\nThe inflate() method takes three arguments:\n<\/p><p>inflate()\u65b9\u6cd5\u63a5\u6536\u4e09\u4e2a\u53c2\u6570:\n<\/p><p><br \/>\n<\/p>\n<ul><li>The resource ID of the layout you want to inflate.\n<\/li><\/ul>\n<ul><li>\u4f60\u60f3\u8981\u6dfb\u52a0\u7684layout\u7684\u8d44\u6e90ID.\n<\/li><\/ul>\n<p><br \/>\n<\/p>\n<ul><li>The ViewGroup to be the parent of the inflated layout. Passing the container is important in order for the system to apply layout parameters to the root view of the inflated layout, specified by the parent view in which it's going.\n<\/li><\/ul>\n<ul><li>\u5c06\u4f5c\u4e3a\u586b\u5145\u5e03\u5c40\u7684\u7236\u5bb9\u5668\u7684ViewGroup.\u4f20\u9012\u5bb9\u5668\u53c2\u6570\u662f\u975e\u5e38\u91cd\u8981\u7684,\u53ea\u7528\u8fd9\u6837\u624d\u80fd\u4f7f\u7cfb\u7edf\u5e94\u7528\u5e03\u5c40\u53c2\u6570\u5230\u586b\u5145\u89c6\u56fe\u7684\u6839\u89c6\u56fe,\u4ece\u800c\u88ab\u5b83\u7684\u7236\u89c6\u56fe\u6240\u786e\u5b9a.\n<\/li><\/ul>\n<p><br \/>\n<\/p>\n<ul><li>A boolean indicating whether the inflated layout should be attached to the ViewGroup (the second parameter) during inflation. (In this case, this is false because the system is already inserting the inflated layout into the container\u2014passing true would create a redundant view group in the final layout.)\n<\/li><\/ul>\n<ul><li>\u4e00\u4e2aboolean\u7c7b\u578b\u7684\u53c2\u6570,\u7528\u4e8e\u5728\u586b\u5145\u65f6\u6307\u660e\u586b\u5145\u7684\u5e03\u5c40\u662f\u5426\u5e94\u8be5\u9644\u52a0\u5728ViewGroup(\u7b2c\u4e8c\u4e2a\u53c2\u6570)\u4e0a.(\u5982\u679c\u7cfb\u7edf\u5df2\u7ecf\u63d2\u5165\u8fd9\u4e2a\u586b\u5145\u5e03\u5c40\u5230\u5bb9\u5668\u4e86\u5c31\u8fd4\u56defalse,\u5982\u679c\u5c06\u8981\u5728\u6700\u7ec8\u5e03\u5c40\u4e2d\u521b\u5efa\u4e00\u4e2a\u591a\u4f59\u7684viewgroup,\u90a3\u5c31\u8fd4\u56detrue)\n<\/li><\/ul>\n<p><br \/>\nNow you've seen how to create a fragment that provides a layout. Next, you need to add the fragment to your activity.\n<\/p>\n<h3> <span class=\"mw-headline\" id=\"Adding_a_fragment_to_an_activity-.E7.BB.99.E4.B8.80.E4.B8.AAActivity.E6.B7.BB.E5.8A.A0.E4.B8.80.E4.B8.AAFragment\">Adding a fragment to an activity-\u7ed9\u4e00\u4e2aActivity\u6dfb\u52a0\u4e00\u4e2aFragment<\/span><\/h3>\n<p>Usually, a fragment contributes a portion of UI to the host activity, which is embedded as a part of the activity's overall view hierarchy. There are two ways you can add a fragment to the activity layout:\n<\/p><p>\u4e00\u822c\u7684\u4e00\u4e2afragment\u63d0\u4f9b\u4e86Activity UI\u7684\u4e00\u90e8\u5206,\u4ed6\u4f5c\u4e3aActivity\u5168\u5c40\u89c6\u56fe\u5c42\u7684\u4e00\u90e8\u5206\u800c\u5d4c\u5165.\u6709\u4e24\u79cd\u65b9\u6cd5\u53ef\u4ee5\u628afragment\u5d4c\u5165\u5230Activity\u5e03\u5c40\u4e2d:\n<\/p><p><br \/>\n<b>*Declare the fragment inside the activity's layout file-\u5728Activity\u5e03\u5c40\u6587\u4ef6\u4e2d\u58f0\u660eFragment.<\/b>\n<\/p><p>In this case, you can specify layout properties for the fragment as if it were a view. For example, here's the layout file for an activity with two fragments:\n<\/p><p>\u8fd9\u6837\u7684\u8bdd,\u4f60\u53ef\u4ee5\u628aFragment\u5f53\u4f5c\u4e00\u4e2a\u89c6\u56fe,\u6bd4\u5982,\u8fd9\u662f\u4e00\u4e2a\u5d4c\u5165\u4e24\u4e2aFragmet\u7684Activity:\n<\/p>\n<pre class=\"xml\">&#160;\n<span style=\"color: #009900;\"><span style=\"font-weight: bold; color: black;\">&lt;?xml<\/span> <span style=\"color: #000066;\">version<\/span>=<span style=\"color: #ff0000;\">&quot;1.0&quot;<\/span> <span style=\"color: #000066;\">encoding<\/span>=<span style=\"color: #ff0000;\">&quot;utf-8&quot;<\/span><span style=\"font-weight: bold; color: black;\">?&gt;<\/span><\/span>\n<span style=\"color: #009900;\"><span style=\"font-weight: bold; color: black;\">&lt;LinearLayout<\/span> <span style=\"color: #000066;\">xmlns:android<\/span>=<span style=\"color: #ff0000;\">&quot;http:\/\/schemas.android.com\/apk\/res\/android&quot;<\/span>\n    <span style=\"color: #000066;\">android:orientation<\/span>=<span style=\"color: #ff0000;\">&quot;horizontal&quot;<\/span>\n    <span style=\"color: #000066;\">android:layout_width<\/span>=<span style=\"color: #ff0000;\">&quot;match_parent&quot;<\/span>\n    <span style=\"color: #000066;\">android:layout_height<\/span>=<span style=\"color: #ff0000;\">&quot;match_parent&quot;<\/span><span style=\"font-weight: bold; color: black;\">&gt;<\/span><\/span>\n    <span style=\"color: #009900;\"><span style=\"font-weight: bold; color: black;\">&lt;fragment<\/span> <span style=\"color: #000066;\">android:name<\/span>=<span style=\"color: #ff0000;\">&quot;com.example.news.ArticleListFragment&quot;<\/span>\n            <span style=\"color: #000066;\">android:id<\/span>=<span style=\"color: #ff0000;\">&quot;@+id\/list&quot;<\/span>\n            <span style=\"color: #000066;\">android:layout_weight<\/span>=<span style=\"color: #ff0000;\">&quot;1&quot;<\/span>\n            <span style=\"color: #000066;\">android:layout_width<\/span>=<span style=\"color: #ff0000;\">&quot;0dp&quot;<\/span>\n            <span style=\"color: #000066;\">android:layout_height<\/span>=<span style=\"color: #ff0000;\">&quot;match_parent&quot;<\/span> <span style=\"font-weight: bold; color: black;\">\/&gt;<\/span><\/span>\n    <span style=\"color: #009900;\"><span style=\"font-weight: bold; color: black;\">&lt;fragment<\/span> <span style=\"color: #000066;\">android:name<\/span>=<span style=\"color: #ff0000;\">&quot;com.example.news.ArticleReaderFragment&quot;<\/span>\n            <span style=\"color: #000066;\">android:id<\/span>=<span style=\"color: #ff0000;\">&quot;@+id\/viewer&quot;<\/span>\n            <span style=\"color: #000066;\">android:layout_weight<\/span>=<span style=\"color: #ff0000;\">&quot;2&quot;<\/span>\n            <span style=\"color: #000066;\">android:layout_width<\/span>=<span style=\"color: #ff0000;\">&quot;0dp&quot;<\/span>\n            <span style=\"color: #000066;\">android:layout_height<\/span>=<span style=\"color: #ff0000;\">&quot;match_parent&quot;<\/span> <span style=\"font-weight: bold; color: black;\">\/&gt;<\/span><\/span>\n<span style=\"color: #009900;\"><span style=\"font-weight: bold; color: black;\">&lt;\/LinearLayout<span style=\"font-weight: bold; color: black;\">&gt;<\/span><\/span><\/span>\n&#160;<\/pre>\n<p>The android:name attribute in the &lt;fragment&gt; specifies the Fragment class to instantiate in the layout.\n&lt;fragment&gt;\u7684android:name\u5c5e\u6027\u6307\u5b9a\u4e86\u5728\u5e03\u5c40\u4e2d\u8981\u5b9e\u4f8b\u5316\u7684Fragment\u7c7b.\n<\/p><p>When the system creates this activity layout, it instantiates each fragment specified in the layout and calls the onCreateView() method for each one, to retrieve each fragment's layout. The system inserts the View returned by the fragment directly in place of the &lt;fragment&gt; element.\n<\/p>\n<div style=\"margin: 1em 0; padding: 10px; overflow: auto; background: #F7F7F7; border-left:4px solid; border-color:#258AAF;\">\n<p>Note: Each fragment requires a unique identifier that the system can use to restore the fragment if the activity is restarted (and which you can use to capture the fragment to perform transactions, such as remove it). There are three ways to provide an ID for a fragment:\n\u5728\u7cfb\u7edf\u521b\u5efa\u8fd9\u4e2aActivity\u5e03\u5c40\u7684\u65f6\u5019,\u4ed6\u4f1a\u5b9e\u4f8b\u5316\u6bcf\u4e2a\u5e03\u5c40\u4e2d\u7684\u6bcf\u4e2afragment,\u8c03\u7528\u6bcf\u4e2afragment\u7684onCreateView()\u65b9\u6cd5\u6765\u53d6\u56de\u6bcf\u4e2afragment\u7684\u89c6\u56fe.\u7cfb\u7edf\u628afragment\u8fd4\u56de\u7684\u89c6\u56fe\u76f4\u63a5\u63d2\u5165\u5230&lt;fragment&gt;\u6807\u7b7e\u6240\u5728\u7684\u5730\u65b9.\n<\/p>\n<ul><li>Supply the android:id attribute with a unique ID.\n<\/li><li>\u4f7f\u7528android:id\u6765\u6307\u5b9a\u5b83\u552f\u4e00\u7684ID.\n<\/li><\/ul>\n<ul><li>Supply the android:tag attribute with a unique string.\n<\/li><li>\u4f7f\u7528android:tag\u6765\u6307\u5b9a\u4e00\u4e2a\u552f\u4e00\u7684\u5b57\u7b26\u4e32\u6807\u5fd7\n<\/li><\/ul>\n<ul><li>If you provide neither of the previous two, the system uses the ID of the container view.\n<\/li><li>\u5982\u679c\u4e0a\u9762\u4e24\u4e2a\u4f60\u90fd\u4e0d\u6307\u5b9a,\u7cfb\u7edf\u4f1a\u4f7f\u7528\u5bb9\u5668\u89c6\u56fe\u7684ID.\n<\/li><\/ul>\n<\/div>\n<ul><li>Or, programmatically add the fragment to an existing ViewGroup.\n<\/li><li>\u6216\u8005,\u673a\u68b0\u6027\u7684\u628afragment\u6dfb\u52a0\u5230ViewGroup\u4e2d.\n<\/li><\/ul>\n<p>At any time while your activity is running, you can add fragments to your activity layout. You simply need to specify a ViewGroup in which to place the fragment.\nTo make fragment transactions in your activity (such as add, remove, or replace a fragment), you must use APIs from FragmentTransaction. You can get an instance of FragmentTransaction from your Activity like this:\n<\/p><p>\u5728\u4efb\u4f55\u4f60Activity\u8fd0\u884c\u7684\u65f6\u5019,\u4f60\u90fd\u53ef\u4ee5\u628afragment\u6dfb\u52a0\u5230Activity\u7684\u89c6\u56fe\u4e2d.\u4f60\u53ea\u9700\u8981\u6307\u5b9a\u4e00\u4e2a\u7528\u4e8e\u76db\u653eFragment\u7684ViewGroup.\u4e3a\u4e86\u8ba9fragment\u53ef\u4ee5\u88ab\u7ba1\u7406(\u6bd4\u5982\u6dfb\u52a0,\u5220\u9664,\u66ff\u6362fragment),\u4f60\u5fc5\u987b\u4f7f\u7528\u6765\u81eaFragmentTransaction\u7684API.\u4f60\u53ef\u4ee5\u50cf\u4e0b\u9762\u8fd9\u6837\u5728Activity\u4e2d\u83b7\u53d6\u4e00\u4e2aFragmentTransaction\u7684\u5b9e\u4f8b:\n<\/p>\n<pre>\nFragmentManager fragmentManager = getFragmentManager()\nFragmentTransaction fragmentTransaction = fragmentManager.beginTransaction();\n<\/pre>\n<p>You can then add a fragment using the add() method, specifying the fragment to add and the view in which to insert it. For example:\n<\/p><p>\u4f60\u53ef\u4ee5\u4f7f\u7528Add()\u65b9\u6cd5\u6dfb\u52a0\u4e00\u4e2aFragment,\u6307\u5b9a\u8981\u6dfb\u52a0\u7684Fragment\u548c\u76ee\u6807View,\u5982\u4e0b:\n<\/p>\n<pre>\nExampleFragment fragment = new ExampleFragment();\nfragmentTransaction.add(R.id.fragment_container, fragment);\nfragmentTransaction.commit();\n<\/pre>\n<p>The first argument passed to add() is the ViewGroup in which the fragment should be placed, specified by resource ID, and the second parameter is the fragment to add.\nOnce you've made your changes with FragmentTransaction, you must call commit() for the changes to take effect.\n<\/p><p>add()\u65b9\u6cd5\u4e2d\u7684\u7b2c\u4e00\u4e2a\u53c2\u6570\u662fFragment\u6240\u8981\u653e\u7f6e\u7684\u76ee\u6807ViewGroup,\u901a\u8fc7\u8d44\u6e90ID\u6307\u5b9a,\u7b2c\u4e8c\u4e2a\u53c2\u6570\u662f\u8981\u6dfb\u52a0\u7684Fragment.\u53ea\u8981\u4f60\u4f7f\u7528FragmentTransaction\u505a\u4e86\u4fee\u6539,\u4f60\u5fc5\u987b\u8c03\u7528commit()\u65b9\u6cd5\u6765\u4f7f\u4fee\u6539\u751f\u6548.\n<\/p>\n<h3> <span class=\"mw-headline\" id=\"Adding_a_fragment_without_a_UI-.E6.B7.BB.E5.8A.A0.E4.B8.80.E4.B8.AA.E6.B2.A1.E6.9C.89UI.E7.9A.84Fragment\">Adding a fragment without a UI-\u6dfb\u52a0\u4e00\u4e2a\u6ca1\u6709UI\u7684Fragment<\/span><\/h3>\n<p>The examples above show how to add a fragment to your activity in order to provide a UI. However, you can also use a fragment to provide a background behavior for the activity without presenting additional UI.\n<\/p><p>\u4e0a\u9762\u7684\u4f8b\u5b50\u60f3\u4f60\u5c55\u793a\u4e86\u600e\u4e48\u6dfb\u52a0\u4e00\u4e2a\u542b\u6709UI\u7684Fragment\u5230\u4f60\u7684Actvity.\u7136\u800c,\u5bf9\u4e8e\u4e0d\u60f3\u589e\u52a0\u800c\u5916UI\u7684Activity\u6765\u8bf4,\u4f60\u4e5f\u53ef\u4ee5\u4f7f\u7528Fragment\u6765\u8fdb\u884c\u540e\u53f0\u884c\u4e3a.\n<\/p><p><br \/>\nTo add a fragment without a UI, add the fragment from the activity using add(Fragment, String) (supplying a unique string \"tag\" for the fragment, rather than a view ID). This adds the fragment, but, because it's not associated with a view in the activity layout, it does not receive a call to onCreateView(). So you don't need to implement that method.\n<\/p><p>\u4e3a\u4e86\u6dfb\u52a0\u4e00\u4e2a\u6ca1\u6709UI\u7684Fragment.\u9700\u8981\u4f7f\u7528add(Fragment, String) \u65b9\u6cd5,\u5176\u4e2d,\u4f60\u9700\u8981\u4e3aFragment\u63d0\u4f9b\u4e00\u4e2a\u5b57\u7b26\u4e32\u7684\u6807\u5fd7\u800c\u4e0d\u662f\u4e00\u4e2a\u89c6\u56feID.\u8fd9\u6837\u589e\u52a0\u7684Fragment,\u7531\u4e8e\u6ca1\u6709\u6d89\u53ca\u5230Activity\u7684\u89c6\u56fe,\u6240\u4ee5\u4e0d\u4f1a\u8c03\u7528onCreateView()\u65b9\u6cd5.\u6240\u4ee5\u4f60\u4e0d\u9700\u8981\u5b9e\u73b0\u8fd9\u4e2a\u65b9\u6cd5.\n<\/p><p><br \/>\nSupplying a string tag for the fragment isn't strictly for non-UI fragments\u2014you can also supply string tags to fragments that do have a UI\u2014but if the fragment does not have a UI, then the string tag is the only way to identify it. If you want to get the fragment from the activity later, you need to use findFragmentByTag().\n<\/p><p>\u4e3aFragment\u63d0\u4f9b\u4e00\u4e2a\u5b57\u7b26\u4e32\u6807\u5fd7\u4e0d\u4e00\u5b9a\u53ea\u5c40\u9650\u4e8e\u6ca1\u6709UI\u7684Fragment,\u4f60\u4e5f\u53ef\u4ee5\u4e3a\u6709UI\u7684Fragment\u6307\u5b9a\u4e00\u4e2a\u5b57\u7b26\u4e32\u6807\u5fd7,\u4f46\u662f\u5982\u679c\u8fd9\u4e2aFragment\u771f\u7684\u6ca1\u6709UI,\u90a3\u8fd9\u4e2a\u5b57\u7b26\u4e32\u6807\u5fd7\u662f\u786e\u5b9a\u5b83\u7684\u552f\u4e00\u6807\u5fd7.\u5982\u679c\u4f60\u60f3\u5728\u540e\u9762\u4eceActivity\u4e2d\u83b7\u53d6\u5230\u8fd9\u4e2afragment,\u4f60\u9700\u8981\u4f7f\u7528findFragmentByTag()\u65b9\u6cd5.\n<\/p><p><br \/>\nFor an example activity that uses a fragment as a background worker, without a UI, see the FragmentRetainInstance.java sample.\n<\/p><p>\u5728FragmentRetainInstance.java\u6587\u4ef6\u7684\u4f8b\u5b50\u5c55\u793a\u4e86Actvity\u600e\u4e48\u4f7f\u7528\u4e00\u4e2a\u6ca1\u6709UI\u7684fragment\u6765\u51fa\u6765\u540e\u53f0\u5de5\u4f5c.\n<\/p>\n<h2> <span class=\"mw-headline\" id=\"Managing_Fragments-.E7.AE.A1.E7.90.86fragment\">Managing Fragments-\u7ba1\u7406fragment<\/span><\/h2>\n<p>To manage the fragments in your activity, you need to use FragmentManager. To get it, call getFragmentManager() from your activity.\n<\/p><p>\u4e3a\u4e86\u7ba1\u7406\u4f60Activity\u4e2d\u7684fragment,\u4f60\u9700\u8981\u4f7f\u7528FragmentManager.\u4f60\u53ef\u4ee5\u901a\u8fc7\u4f60Activity\u4e2d\u7684getFragmentManager()\u6765\u83b7\u53d6\u5b83.\n<\/p><p><br \/>\nSome things that you can do with FragmentManager include:\n<\/p><p>\u4f7f\u7528FragmentManager\u4f60\u53ef\u4ee5:\n<\/p>\n<ul><li>Get fragments that exist in the activity, with findFragmentById() (for fragments that provide a UI in the activity layout) or findFragmentByTag() (for fragments that do or don't provide a UI).\n<\/li><li>\u4f7f\u7528findFragmentById()(\u63d0\u4f9bUI\u7684Fragment)\u6216\u8005findFragmentByTag()(\u6ca1\u6709\u63d0\u4f9bUI\u7684Fragment) \u83b7\u53d6\u4f60Activity\u5b58\u5728\u7684Fragment,\n<\/li><li>Pop fragments off the back stack, with popBackStack() (simulating a Back command by the user).\n<\/li><li>\u4f7f\u7528popBackStack()\u628aFragment\u4ece\u8fd4\u56de\u6808\u4e2d\u5f39\u51fa(\u6a21\u62df\u7528\u6237\u7684\u8fd4\u56de\u547d\u4ee4).\n<\/li><li>Register a listener for changes to the back stack, with addOnBackStackChangedListener().\n<\/li><li>\u4f7f\u7528addOnBackStackChangedListener()\u65b9\u6cd5\u4e3a\u8fd4\u56de\u6808\u7684\u53d8\u5316\u6ce8\u518c\u76d1\u542c\u5668.\n<\/li><\/ul>\n<p><br \/>\nFor more information about these methods and others, refer to the FragmentManager class documentation.\n<\/p><p>\u8bf7\u53c2\u8003\u6587\u6863\u7684 FragmentManager \u7c7b\u6765\u67e5\u770b\u8fc7\u4e8e\u8fd9\u4e9b\u65b9\u6cd5(\u8fd8\u6709\u5176\u4ed6\u65b9\u6cd5)\u7684\u66f4\u591a\u5185\u5bb9.\n<\/p><p>As demonstrated in the previous section, you can also use FragmentManager to open a FragmentTransaction, which allows you to perform transactions, such as add and remove fragments.\n<\/p><p>\u6b63\u5982\u524d\u9762\u7684\u6587\u6863\u6240\u8bb2\u7684,\u4f60\u4e5f\u53ef\u4ee5\u4f7f\u7528FragmentManager\u6765\u6253\u5f00FragmentTransaction,FragmentTransaction\u5141\u8bb8\u4f60\u6267\u884c\u6dfb\u52a0,\u5220\u9664Fragment\u7684\u4e8b\u52a1.\n<\/p>\n<h2> <span class=\"mw-headline\" id=\"Performing_Fragment_Transactions-.E6.89.A7.E8.A1.8CFragment.E4.BA.8B.E5.8A.A1.\">Performing Fragment Transactions-\u6267\u884cFragment\u4e8b\u52a1.<\/span><\/h2>\n<p>A great feature about using fragments in your activity is the ability to add, remove, replace, and perform other actions with them, in response to user interaction. Each set of changes that you commit to the activity is called a transaction and you can perform one using APIs in FragmentTransaction. You can also save each transaction to a back stack managed by the activity, allowing the user to navigate backward through the fragment changes (similar to navigating backward through activities).\n<\/p><p>\u5728\u4f60\u7684Activity\u4e2d\u4f7f\u7528Fragment\u7684\u6700\u5927\u597d\u5904\u5c31\u662f\u53ef\u4ee5\u9488\u5bf9\u7528\u6237\u7684\u64cd\u4f5c,\u8fdb\u884c\u5bf9Fragment\u7684\u6dfb\u52a0,\u79fb\u9664,\u66ff\u6362\u7b49\u7b49\u5176\u4ed6\u64cd\u4f5c.\u4f60\u63d0\u4ea4\u7ed9Activity\u7684\u6bcf\u4e2a\u53d8\u5316\u79f0\u4e3a\u4e00\u4e2a\u4e8b\u52a1,\u8fd9\u4e9b\u4e8b\u52a1\u4f60\u53ef\u4ee5\u4f7f\u7528FragmenTransaction\u7684API\u6765\u5b9e\u73b0.\u4f60\u4e5f\u53ef\u4ee5\u5728Activity\u7ba1\u7406\u7684\u8fd4\u56de\u6808\u4e2d\u4fdd\u5b58\u6bcf\u4e2a\u4e8b\u52a1,\u4f7f\u7528\u6237\u53ef\u4ee5\u5728Fragmen\u7684\u53d8\u5316\u540e\u8fd4\u56de\u4e4b\u524d\u7684\u72b6\u6001(\u7c7b\u4f3c\u4e8e\u5728Activity\u8df3\u8f6c\u540e\u7684\u8fd4\u56de).\n<\/p><p><br \/>\nYou can acquire an instance of FragmentTransaction from the FragmentManager like this:\n<\/p><p>\u4f60\u53ef\u4ee5\u50cf\u8fd9\u6837\u4eceFragmentManager\u4e2d\u53d6\u5f97\u4e00\u4e2aFragmentTransaction\u7684\u5b9e\u4f8b:\n<\/p>\n<pre>\nFragmentManager fragmentManager = getFragmentManager();\nFragmentTransaction fragmentTransaction = fragmentManager.beginTransaction();\n<\/pre>\n<p>Each transaction is a set of changes that you want to perform at the same time. You can set up all the changes you want to perform for a given transaction using methods such as add(), remove(), and replace(). Then, to apply the transaction to the activity, you must call commit().\n<\/p><p>\u6bcf\u4e2a\u4e8b\u52a1\u662f\u4e00\u7cfb\u5217\u4f60\u60f3\u8981\u540c\u65f6\u6267\u884c\u7684Fragmen\u7684\u53d8\u5316.\u4f60\u53ef\u4ee5\u4f7f\u7528\u50cfadd(),remove(),replace()\u8fd9\u6837\u7684\u65b9\u6cd5\u6765\u4e3a\u4e00\u4e2a\u4e8b\u52a1\u8bbe\u5b9a\u4f60\u60f3\u8981\u6267\u884c\u7684\u64cd\u4f5c.\u4e3a\u4e86\u4f7fActivity\u7684\u4e8b\u52a1\u751f\u6548,\u4f60\u5fc5\u987b\u6267\u884ccommit()\u65b9\u6cd5.\n<\/p><p><br \/>\nBefore you call commit(), however, you might want to call addToBackStack(), in order to add the transaction to a back stack of fragment transactions. This back stack is managed by the activity and allows the user to return to the previous fragment state, by pressing the Back button.\n<\/p><p>\u5728\u4f60\u8c03\u7528commit()\u65b9\u6cd5\u7684\u4e4b\u524d,\u4e3a\u4e86\u6dfb\u52a0\u8fd9\u4e2a\u4e8b\u52a1\u5230\u4e00\u4e2aFragmen\u4e8b\u52a1\u7684\u8fd4\u56de\u6808,\u4f60\u53ef\u80fd\u60f3\u8981\u8c03\u7528addToBackStack()\u65b9\u6cd5.\u8fd9\u4e2a\u8fd4\u56de\u6808\u88abActivity\u7ba1\u7406,\u5141\u8bb8\u7528\u6237\u901a\u8fc7\u6309\u4e0b\u8fd4\u56de\u6309\u952e\u8fd4\u56de\u4e4b\u524d\u7684Fragmen\u72b6\u6001.\n<\/p><p><br \/>\nFor example, here's how you can replace one fragment with another, and preserve the previous state in the back stack:\n<\/p><p>\u8fd9\u91cc\u5c55\u793a\u4e86\u600e\u4e48\u4f7f\u7528\u4e00\u4e2aFragmen\u66ff\u6362\u53e6\u4e00\u4e2a,\u7136\u540e\u5728\u8fd4\u56de\u6808\u4e2d\u8fd4\u56de\u5230\u4e4b\u524d\u7684\u72b6\u6001.\n<\/p>\n<pre class=\"java\">&#160;\n<span style=\"color: #808080; font-style: italic;\">\/\/ Create new fragment and transaction<\/span>\n<span style=\"color: #808080; font-style: italic;\">\/\/\u521b\u5efa\u4e00\u4e2a\u65b0\u7684Fragmen\u548c\u4e8b\u52a1<\/span>\nFragment newFragment = <span style=\"color: #000000; font-weight: bold;\">new<\/span> ExampleFragment<span style=\"color: #66cc66;\">&#40;<\/span><span style=\"color: #66cc66;\">&#41;<\/span>;\nFragmentTransaction transaction = getFragmentManager<span style=\"color: #66cc66;\">&#40;<\/span><span style=\"color: #66cc66;\">&#41;<\/span>.<span style=\"color: #006600;\">beginTransaction<\/span><span style=\"color: #66cc66;\">&#40;<\/span><span style=\"color: #66cc66;\">&#41;<\/span>;\n&#160;\n<span style=\"color: #808080; font-style: italic;\">\/\/ Replace whatever is in the fragment_container view with this fragment,<\/span>\n<span style=\"color: #808080; font-style: italic;\">\/\/\u4f7f\u7528\u8fd9\u4e2aFragment\u66ff\u6362\u5728Fragmen\u5bb9\u5668\u4e2d\u7684Fragmet<\/span>\n<span style=\"color: #808080; font-style: italic;\">\/\/ and add the transaction to the back stack<\/span>\n<span style=\"color: #808080; font-style: italic;\">\/\/\u6dfb\u52a0\u8fd9\u4e2a\u4e8b\u52a1\u5230\u8fd4\u56de\u6808<\/span>\ntransaction.<span style=\"color: #006600;\">replace<\/span><span style=\"color: #66cc66;\">&#40;<\/span>R.<span style=\"color: #006600;\">id<\/span>.<span style=\"color: #006600;\">fragment_container<\/span>, newFragment<span style=\"color: #66cc66;\">&#41;<\/span>;\ntransaction.<span style=\"color: #006600;\">addToBackStack<\/span><span style=\"color: #66cc66;\">&#40;<\/span><span style=\"color: #000000; font-weight: bold;\">null<\/span><span style=\"color: #66cc66;\">&#41;<\/span>;\n&#160;\n<span style=\"color: #808080; font-style: italic;\">\/\/ Commit the transaction<\/span>\n<span style=\"color: #808080; font-style: italic;\">\/\/\u63d0\u4ea4\u8fd9\u4e2a\u4e8b\u52a1.<\/span>\ntransaction.<span style=\"color: #006600;\">commit<\/span><span style=\"color: #66cc66;\">&#40;<\/span><span style=\"color: #66cc66;\">&#41;<\/span>;\n&#160;<\/pre>\n<p>In this example, newFragment replaces whatever fragment (if any) is currently in the layout container identified by the R.id.fragment_container ID. By calling addToBackStack(), the replace transaction is saved to the back stack so the user can reverse the transaction and bring back the previous fragment by pressing the Back button.\n<\/p><p>\u5728\u8fd9\u4e2a\u4f8b\u5b50\u4e2d,\u65b0\u7684Fragmen\u66ff\u6362\u4e86R.id.fragment_container ID\u6307\u5b9a\u7684\u5e03\u5c40\u5bb9\u5668\u4e2d\u5f53\u524d\u5b58\u5728\u7684fragment(\u5982\u679c\u5b58\u5728\u7684\u8bdd).\u901a\u8fc7\u8c03\u7528addToBackStack()\u65b9\u6cd5,\u66ff\u6362\u4e8b\u52a1\u88ab\u4fdd\u5b58\u5728\u4e86\u8fd4\u56de\u6808\u4e2d,\u8fd9\u6837\u7528\u6237\u53ef\u4ee5\u56de\u9000\u8fd9\u4e2a\u4e8b\u52a1,\u901a\u8fc7\u6309\u4e0b\u8fd4\u56de\u952e\u8fd4\u56de\u5230\u4ee5\u524d\u7684fragment.\n<\/p><p><br \/>\nIf you add multiple changes to the transaction (such as another add() or remove()) and call addToBackStack(), then all changes applied before you call commit() are added to the back stack as a single transaction and the Back button will reverse them all together.\n<\/p><p>\u5982\u679c\u4f60\u5728\u4e8b\u52a1\u4e2d\u6dfb\u52a0\u4e86\u591a\u4e2a\u53d8\u5316(\u6bd4\u5982\u53e6\u4e00\u4e2aadd()\u65b9\u6cd5\u6216\u8005remove()\u65b9\u6cd5),\u7136\u540e\u8c03\u7528\u4e86addToBackStack()\u65b9\u6cd5,\u90a3\u5728\u4f60\u8c03\u7528commit()\u65b9\u6cd5\u4e4b\u524d\u7684\u6240\u6709\u53d8\u5316\u90fd\u4f1a\u4f5c\u4e3a\u5355\u72ec\u7684\u4e8b\u52a1\u88ab\u6dfb\u52a0\u5230\u8fd4\u56de\u6808\u4e2d,\u8fd4\u56de\u952e\u5c06\u4f1a\u628a\u4ed6\u4eec\u5168\u90e8\u56de\u9000.\n<\/p><p>The order in which you add changes to a FragmentTransaction doesn't matter, except:\n<\/p><p>\u9664\u4e86\u4e0b\u9762\u8fd9\u4e9b,\u5176\u4ed6\u7684\u60c5\u51b5\u548c\u4f60\u5728FragmentTransaction\u4e2d\u6dfb\u52a0\u7684\u987a\u5e8f\u6ca1\u6709\u5173\u7cfb\n<\/p><p><br \/>\n<\/p>\n<ul><li>You must call commit() last\n<\/li><li>\u4f60\u4e0d\u884c\u5728\u6700\u540e\u8c03\u7528commit()\u65b9\u6cd5\n<\/li><\/ul>\n<ul><li>If you're adding multiple fragments to the same container, then the order in which you add them determines the order they appear in the view hierarchy\n<\/li><li>\u5982\u679c\u4f60\u5728\u5411\u540c\u4e00\u4e2a\u5bb9\u5668\u6dfb\u52a0\u591a\u4e2afragment,\u90a3\u4e48\u4f60\u6dfb\u52a0\u7684\u987a\u5e8f\u51b3\u5b9a\u4e86\u4ed6\u4eec\u5728\u89c6\u56fe\u5c42\u51fa\u73b0\u7684\u987a\u5e8f.\n<\/li><\/ul>\n<p><br \/>\nIf you do not call addToBackStack() when you perform a transaction that removes a fragment, then that fragment is destroyed when the transaction is committed and the user cannot navigate back to it. Whereas, if you do call addToBackStack() when removing a fragment, then the fragment is stopped and will be resumed if the user navigates back.\n<\/p><p>\u5982\u679c\u5728\u4f60\u6267\u884c\u4e00\u4e2a\u79fb\u9664\u6240\u6709fragment\u7684\u4e8b\u52a1\u7684\u65f6\u5019\u6ca1\u6709\u8c03\u7528addToBackStack()\u65b9\u6cd5,\u90a3\u4e48\u8fd9\u4e2afragment\u5c06\u4f1a\u5728\u4e8b\u52a1\u63d0\u4ea4\u540e\u88ab\u6467\u6bc1,\u7528\u6237\u4e0d\u80fd\u518d\u8fd4\u56de\u5230\u4e4b\u524d\u7684fragment.\u5982\u679c\u4f60\u5728\u79fb\u9664fragment\u7684\u65f6\u5019\u8c03\u7528\u4e86addToBackStack()\u65b9\u6cd5,\u90a3\u8fd9\u4e2afragment\u4f1a\u88ab\u505c\u6b62,\u5e76\u53ef\u4ee5\u5728\u7528\u6237\u6309\u8fd4\u56de\u7684\u65f6\u5019\u6062\u590d.\n<\/p>\n<div style=\"margin: 1em 0; padding: 10px; overflow: auto; background: #F7F7F7; border-left:4px solid; border-color:#258AAF;\">\n<p>Tip: For each fragment transaction, you can apply a transition animation, by calling setTransition() before you commit.\n\u5c0f\u8d34\u58eb:\u5bf9\u4e8e\u6bcf\u4e2afragment\u4e8b\u52a1,\u4f60\u53ef\u4ee5\u5728\u63d0\u4ea4\u4e4b\u524d\u901a\u8fc7\u8c03\u7528setTransition()\u6765\u5e94\u7528\u4e00\u4e2afragment\u52a8\u753b.\n<\/p>\n<\/div>\n<p>Calling commit() does not perform the transaction immediately. Rather, it schedules it to run on the activity's UI thread (the \"main\" thread) as soon as the thread is able to do so. If necessary, however, you may call executePendingTransactions() from your UI thread to immediately execute transactions submitted by commit(). Doing so is usually not necessary unless the transaction is a dependency for jobs in other threads.\n<\/p><p>\u8c03\u7528commit()\u65b9\u6cd5\u4e0d\u80fd\u7acb\u5373\u6267\u884c\u4e8b\u52a1\u800c\u662f\u5b89\u6392\u5b83\u8fd0\u884c\u5728Activity\u7684UI\u7ebf\u7a0b\u4e2d(\"\u4e3b\"\u7ebf\u7a0b)---\u5982\u679c\u8fd9\u7ebf\u7a0b\u53ef\u4ee5\u8fd9\u4e48\u505a\u7684\u8bdd.\u5982\u679c\u9700\u8981,\u4f60\u53ef\u4ee5\u5728\u4f60UI\u7ebf\u7a0b\u4e2d\u8c03\u7528executePendingTransactions()\u65b9\u6cd5\u6765\u76f4\u63a5\u6267\u884ccommit()\u65b9\u6cd5\u63d0\u4ea4\u7684\u4e8b\u52a1.\u8fd9\u4e48\u591a\u4e00\u822c\u4e0d\u5fc5\u8981\u9664\u975e\u4e8b\u52a1\u4f9d\u8d56\u4e8e\u5176\u4ed6\u7ebf\u7a0b\u7684\u5de5\u4f5c.\n<\/p>\n<div style=\"margin: 1em 0; padding: 10px; overflow: auto; background: #F7F7F7; border-left:4px solid; border-color:#FF7F00;\">\n<p>Caution: You can commit a transaction using commit() only prior to the activity saving its state (when the user leaves the activity). If you attempt to commit after that point, an exception will be thrown. This is because the state after the commit can be lost if the activity needs to be restored. For situations in which its okay that you lose the commit, use commitAllowingStateLoss().\n<\/p><p>\u6ce8\u610f:\u4f60\u53ea\u53ef\u4ee5\u5728Activity\u4fdd\u5b58\u4ed6\u72b6\u6001\u4e4b\u524d(\u5728\u7528\u6237\u79bb\u5f00\u8fd9\u4e2aActvity\u7684\u65f6\u5019)\u4f7f\u7528commit()\u65b9\u6cd5\u6765\u63d0\u4ea4\u4e00\u4e2a\u4e8b\u52a1.\u5982\u679c\u4f60\u5728\u8fd9\u4e2a\u65f6\u95f4\u70b9\u4e4b\u540e\u63d0\u4ea4,\u7cfb\u7edf\u4f1a\u629b\u51fa\u4e00\u4e2a\u5f02\u5e38.\u8fd9\u662f\u56e0\u4e3a\u5982\u679cActivity\u9700\u8981\u6062\u590d,\u5728\u63d0\u4ea4\u4e4b\u540e\u7684\u72b6\u6001\u53ef\u80fd\u4f1a\u4e22\u5931.\u5bf9\u4e8e\u5141\u8bb8\u4e22\u5931\u63d0\u4ea4\u7684\u60c5\u51b5,\u8bf7\u4f7f\u7528commitAllowingStateLoss()\u65b9\u6cd5.\n<\/p>\n<\/div>\n<h2> <span class=\"mw-headline\" id=\"Communicating_with_the_Activity-.E4.B8.8EActivity.E7.9A.84.E9.80.9A.E8.AE.AF\">Communicating with the Activity-\u4e0eActivity\u7684\u901a\u8baf<\/span><\/h2>\n<p>Although a Fragment is implemented as an object that's independent from an Activity and can be used inside multiple activities, a given instance of a fragment is directly tied to the activity that contains it.\n<\/p><p>\u5373\u4f7ffragment\u662f\u4f5c\u4e3a\u4e00\u4e2aobject\u5b9e\u73b0\u7684,\u72ec\u7acb\u4e8eActivity\u7684\u5e76\u4e14\u53ef\u4ee5\u5728\u90a3\u591a\u4e2aActivity\u4e2d\u4f7f\u7528,\u4f46\u662f\u4e00\u4e2afragment\u5b9e\u4f8b\u8fd8\u662f\u548c\u5b83\u6240\u5728\u7684\u5bb9\u5668\u6709\u76f4\u63a5\u7684\u5173\u7cfb.\n<\/p><p><br \/>\nSpecifically, the fragment can access the Activity instance with getActivity() and easily perform tasks such as find a view in the activity layout:\n<\/p><p>\u7279\u522b\u7684,fragment\u53ef\u4ee5\u901a\u8fc7getActivity()\u65b9\u6cd5\u6765\u8bbf\u95eeActivity\u5b9e\u4f8b\u5e76\u53ef\u4ee5\u8f7b\u6613\u7684\u6267\u884c\u50cf\u5728activity\u89c6\u56fe\u4e2d\u67e5\u627eView\u7684\u4efb\u52a1.\n<\/p>\n<pre>\nView listView = getActivity().findViewById(R.id.list);\n<\/pre>\n<p>Likewise, your activity can call methods in the fragment by acquiring a reference to the Fragment from FragmentManager, using findFragmentById() or findFragmentByTag(). For example:\n<\/p><p>\u540c\u6837\u7684,\u4f7f\u7528findFragmentById()\u6216findFragmentByTag()\u901a\u8fc7\u4eceFragmentManager\u83b7\u53d6\u4e00\u4e2a\u5bf9\u8fd9\u4e2aFragment\u7684\u5f15\u7528,\u4f60\u7684Activity\u53ef\u4ee5\u8c03\u7528fragment\u4e2d\u7684\u65b9\u6cd5\n<\/p>\n<pre>\nExampleFragment fragment = (ExampleFragment) getFragmentManager().findFragmentById(R.id.example_fragment);\n<\/pre>\n<h2> <span class=\"mw-headline\" id=\"Creating_event_callbacks_to_the_activity-.E4.B8.BAActivity.E5.88.9B.E5.BB.BA.E6.97.B6.E9.97.B4.E5.9B.9E.E8.B0.83\">Creating event callbacks to the activity-\u4e3aActivity\u521b\u5efa\u65f6\u95f4\u56de\u8c03<\/span><\/h2>\n<p>In some cases, you might need a fragment to share events with the activity. A good way to do that is to define a callback interface inside the fragment and require that the host activity implement it. When the activity receives a callback through the interface, it can share the information with other fragments in the layout as necessary.\n<\/p><p>\u5728\u4e00\u4e9b\u60c5\u51b5\u4e0b,\u4f60\u53ef\u60dc\u9700\u8981\u4e00\u4e2aFragment\u548cActivity\u5171\u4eab\u4e8b\u4ef6.\u4e00\u4e2a\u597d\u7684\u65b9\u6cd5\u662f\u5728Fragment\u4e2d\u5b9a\u4e49\u4e00\u4e2a\u56de\u8c03\u63a5\u53e3\u7136\u540e\u8ba9\u627f\u8f7d\u4ed6\u7684Activity\u5b9e\u73b0\u5b83.\u5f53Activity\u901a\u8fc7\u63a5\u53e3\u63a5\u6536\u5230\u8c03\u7528\u65f6,\u5fc5\u8981\u65f6\u4ed6\u53ef\u4ee5\u548c\u89c6\u56fe\u4e2d\u7684\u5176\u4ed6Fragment\u5171\u4eab\u4fe1\u606f.\n<\/p><p><br \/>\nor example, if a news application has two fragments in an activity\u2014one to show a list of articles (fragment A) and another to display an article (fragment B)\u2014then fragment A must tell the activity when a list item is selected so that it can tell fragment B to display the article. In this case, the OnArticleSelectedListener interface is declared inside fragment A:\n<\/p><p>\u4e3e\u4e2a\u4f8b\u5b50,\u5982\u679c\u4e00\u4e2a\u65b0\u7684\u5e94\u7528\u5728\u4e00\u4e2aActivity\u4e2d\u6709\u4e24\u4e2aFragment,\u4e00\u4e2a\u663e\u793a\u4e00\u5217\u6587\u7ae0\u6807\u9898(FragmentA),\u53e6\u4e00\u5217\u663e\u793a\u6587\u7ae0\u5185\u5bb9(FragmentB),\u90a3\u4e48\u5728\u4e00\u5217\u88ab\u9009\u4e2d\u7684\u65f6\u5019,FragmentA\u5fc5\u987b\u544a\u8bc9Actvity\u90a3\u4e00\u5217\u88ab\u9009\u4e2d\u4e86,\u8fd9\u6837Actvity\u5c31\u53ef\u4ee5\u544a\u8bc9FragmentB\u663e\u793a\u54ea\u4e00\u7bc7\u6587\u7ae0.\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b,OnArticleSelectedListener \u63a5\u53e3\u4f1a\u5728FragmentA\u4e2d\u58f0\u660e.\n<\/p>\n<pre class=\"java\">&#160;\n<span style=\"color: #000000; font-weight: bold;\">public<\/span> <span style=\"color: #000000; font-weight: bold;\">static<\/span> <span style=\"color: #000000; font-weight: bold;\">class<\/span> FragmentA <span style=\"color: #000000; font-weight: bold;\">extends<\/span> ListFragment <span style=\"color: #66cc66;\">&#123;<\/span>\n    ...\n    <span style=\"color: #808080; font-style: italic;\">\/\/ Container Activity must implement this interface<\/span>\n    <span style=\"color: #000000; font-weight: bold;\">public<\/span> <span style=\"color: #000000; font-weight: bold;\">interface<\/span> OnArticleSelectedListener <span style=\"color: #66cc66;\">&#123;<\/span>\n        <span style=\"color: #000000; font-weight: bold;\">public<\/span> <span style=\"color: #993333;\">void<\/span> onArticleSelected<span style=\"color: #66cc66;\">&#40;<\/span>Uri articleUri<span style=\"color: #66cc66;\">&#41;<\/span>;\n    <span style=\"color: #66cc66;\">&#125;<\/span>\n    ...\n<span style=\"color: #66cc66;\">&#125;<\/span>\n&#160;<\/pre>\n<p>Then the activity that hosts the fragment implements the OnArticleSelectedListener interface and overrides onArticleSelected() to notify fragment B of the event from fragment A. To ensure that the host activity implements this interface, fragment A's onAttach() callback method (which the system calls when adding the fragment to the activity) instantiates an instance of OnArticleSelectedListener by casting the Activity that is passed into onAttach():\n<\/p><p>\u7136\u540e\u627f\u8f7dFragment\u7684Activity\u5b9e\u73b0OnArticleSelectedListener\u63a5\u53e3\u5e76\u91cd\u5199onArticleSelected()\u65b9\u6cd5\u6765\u901a\u77e5FragmentB\u54cd\u5e94FragmentA\u7684\u4e8b\u4ef6.\u4e3a\u4e86\u4fdd\u8bc1\u8fd9\u4e2aActivity\u5b9e\u73b0\u4e86\u8fd9\u4e2a\u63a5\u53e3,FragmentA\u7684onAttach()\u65b9\u6cd5(\u7cfb\u7edf\u5728\u6dfb\u52a0Fragment\u5230\u8fd9\u4e2aActivity\u7684\u65f6\u5019\u8c03\u7528)\u901a\u8fc7\u628aActivity\u53c2\u6570\u4f20\u9012\u5230onAttach()\u65b9\u6cd5\u4f20\u9012\u5b9e\u4f8b\u5316\u4e00\u4e2aOnArticleSelectedListener\u5b9e\u4f8b.\n<\/p>\n<pre class=\"java\">&#160;\n<span style=\"color: #000000; font-weight: bold;\">public<\/span> <span style=\"color: #000000; font-weight: bold;\">static<\/span> <span style=\"color: #000000; font-weight: bold;\">class<\/span> FragmentA <span style=\"color: #000000; font-weight: bold;\">extends<\/span> ListFragment <span style=\"color: #66cc66;\">&#123;<\/span>\n    OnArticleSelectedListener mListener;\n    ...\n    @Override\n    <span style=\"color: #000000; font-weight: bold;\">public<\/span> <span style=\"color: #993333;\">void<\/span> onAttach<span style=\"color: #66cc66;\">&#40;<\/span>Activity activity<span style=\"color: #66cc66;\">&#41;<\/span> <span style=\"color: #66cc66;\">&#123;<\/span>\n        <span style=\"color: #000000; font-weight: bold;\">super<\/span>.<span style=\"color: #006600;\">onAttach<\/span><span style=\"color: #66cc66;\">&#40;<\/span>activity<span style=\"color: #66cc66;\">&#41;<\/span>;\n        <span style=\"color: #000000; font-weight: bold;\">try<\/span> <span style=\"color: #66cc66;\">&#123;<\/span>\n            mListener = <span style=\"color: #66cc66;\">&#40;<\/span>OnArticleSelectedListener<span style=\"color: #66cc66;\">&#41;<\/span> activity;\n        <span style=\"color: #66cc66;\">&#125;<\/span> <span style=\"color: #000000; font-weight: bold;\">catch<\/span> <span style=\"color: #66cc66;\">&#40;<\/span><a href=\"http:\/\/www.google.com\/search?hl=en&amp;q=allinurl%3AClassCastException+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span style=\"color: #aaaadd; font-weight: bold;\">ClassCastException<\/span><\/a> e<span style=\"color: #66cc66;\">&#41;<\/span> <span style=\"color: #66cc66;\">&#123;<\/span>\n            <span style=\"color: #000000; font-weight: bold;\">throw<\/span> <span style=\"color: #000000; font-weight: bold;\">new<\/span> <a href=\"http:\/\/www.google.com\/search?hl=en&amp;q=allinurl%3AClassCastException+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span style=\"color: #aaaadd; font-weight: bold;\">ClassCastException<\/span><\/a><span style=\"color: #66cc66;\">&#40;<\/span>activity.<span style=\"color: #006600;\">toString<\/span><span style=\"color: #66cc66;\">&#40;<\/span><span style=\"color: #66cc66;\">&#41;<\/span> + <span style=\"color: #ff0000;\">&quot; must implement OnArticleSelectedListener&quot;<\/span><span style=\"color: #66cc66;\">&#41;<\/span>;\n        <span style=\"color: #66cc66;\">&#125;<\/span>\n    <span style=\"color: #66cc66;\">&#125;<\/span>\n    ...\n<span style=\"color: #66cc66;\">&#125;<\/span>\n&#160;<\/pre>\n<p>If the activity has not implemented the interface, then the fragment throws a ClassCastException. On success, the mListener member holds a reference to activity's implementation of OnArticleSelectedListener, so that fragment A can share events with the activity by calling methods defined by the OnArticleSelectedListener interface. For example, if fragment A is an extension of ListFragment, each time the user clicks a list item, the system calls onListItemClick() in the fragment, which then calls onArticleSelected() to share the event with the activity:\n<\/p><p>\u5982\u679cActivity\u6ca1\u6709\u5b9e\u73b0\u8fd9\u4e2a\u63a5\u53e3,\u90a3\u4e48Fragment\u4f1a\u629b\u51faClassCastException\u5f02\u5e38.\u4e0a\u9762\u7684\u6210\u529f\u4f8b\u5b50\u4e2d,mListener\u6210\u5458\u6709\u4e00\u4e2aActivity\u5b9e\u73b0\u7684OnArticleSelectedListener\u7684\u5f15\u7528.\u8fd9\u6837FragmentA\u53ef\u4ee5\u901a\u8fc7\u8c03\u7528OnArticleSelectedListener\u63a5\u53e3\u5b9a\u4e49\u7684\u65b9\u6cd5\u6765\u5171\u4eab\u4e8b\u4ef6.\u6bd4\u5982:\u5982\u679cFragmentA\u662flistFragment\u7684\u6269\u5c55,\u7528\u6237\u6bcf\u6b21\u70b9\u51fblist\u7684\u4e00\u9879,\u7cfb\u7edf\u4f1a\u8c03\u7528Fragment\u7684onListItemClick()\u65b9\u6cd5,\u7136\u540e\u8c03\u7528onArticleSelected() \u65b9\u6cd5\u6765\u548cActivity\u5206\u4eab\u4e8b\u4ef6\u4fe1\u606f.\n<\/p>\n<pre class=\"java\">&#160;\n<span style=\"color: #000000; font-weight: bold;\">public<\/span> <span style=\"color: #000000; font-weight: bold;\">static<\/span> <span style=\"color: #000000; font-weight: bold;\">class<\/span> FragmentA <span style=\"color: #000000; font-weight: bold;\">extends<\/span> ListFragment <span style=\"color: #66cc66;\">&#123;<\/span>\n    OnArticleSelectedListener mListener;\n    ...\n    @Override\n    <span style=\"color: #000000; font-weight: bold;\">public<\/span> <span style=\"color: #993333;\">void<\/span> onListItemClick<span style=\"color: #66cc66;\">&#40;<\/span><a href=\"http:\/\/www.google.com\/search?hl=en&amp;q=allinurl%3AListView+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span style=\"color: #aaaadd; font-weight: bold;\">ListView<\/span><\/a> l, <a href=\"http:\/\/www.google.com\/search?hl=en&amp;q=allinurl%3AView+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span style=\"color: #aaaadd; font-weight: bold;\">View<\/span><\/a> v, <span style=\"color: #993333;\">int<\/span> position, <span style=\"color: #993333;\">long<\/span> id<span style=\"color: #66cc66;\">&#41;<\/span> <span style=\"color: #66cc66;\">&#123;<\/span>\n        <span style=\"color: #808080; font-style: italic;\">\/\/ Append the clicked item's row ID with the content provider Uri<\/span>\n        Uri noteUri = ContentUris.<span style=\"color: #006600;\">withAppendedId<\/span><span style=\"color: #66cc66;\">&#40;<\/span>ArticleColumns.<span style=\"color: #006600;\">CONTENT_URI<\/span>, id<span style=\"color: #66cc66;\">&#41;<\/span>;\n        <span style=\"color: #808080; font-style: italic;\">\/\/ Send the event and Uri to the host activity<\/span>\n        mListener.<span style=\"color: #006600;\">onArticleSelected<\/span><span style=\"color: #66cc66;\">&#40;<\/span>noteUri<span style=\"color: #66cc66;\">&#41;<\/span>;\n    <span style=\"color: #66cc66;\">&#125;<\/span>\n    ...\n<span style=\"color: #66cc66;\">&#125;<\/span>\n&#160;<\/pre>\n<p>The id parameter passed to onListItemClick() is the row ID of the clicked item, which the activity (or other fragment) uses to fetch the article from the application's ContentProvider.\n<\/p><p>onListItemClick()\u65b9\u6cd5\u4f20\u9012\u7684\u53c2\u6570\u662f\u70b9\u51fb\u9879\u7684\u884cID,Activity(\u6216Fragment)\u53ef\u4ee5\u7528\u5b83\u6765\u4ece\u5e94\u7528\u7684ContentProvider\u586b\u5145\u6587\u7ae0\u4fe1\u606f.\n<\/p><p>More information about using a content provider is available in the Content Providers document.\n\u66f4\u591a\u5173\u4e8e\u4f7f\u7528content provider\u7684\u4fe1\u606f\u8bf7\u53c2\u9605Content Providers\u6587\u6863.\n<\/p>\n<h3> <span class=\"mw-headline\" id=\"Adding_items_to_the_Action_Bar-.E5.9C.A8Action_Bar.E4.B8.8A.E6.B7.BB.E5.8A.A0.E9.A1.B9.\">Adding items to the Action Bar-\u5728Action Bar\u4e0a\u6dfb\u52a0\u9879.<\/span><\/h3>\n<p>Your fragments can contribute menu items to the activity's Options Menu (and, consequently, the Action Bar) by implementing onCreateOptionsMenu(). In order for this method to receive calls, however, you must call setHasOptionsMenu() during onCreate(), to indicate that the fragment would like to add items to the Options Menu (otherwise, the fragment will not receive a call to onCreateOptionsMenu()).\n<\/p><p>\u4f60\u7684Fragment\u53ef\u4ee5\u901a\u8fc7\u5b9e\u73b0onCreateOptionsMenu()\u6765\u4e3aActivity\u7684Options Menu\u521b\u5efa\u83dc\u5355\u9879(\u7ed3\u679c\u5c31\u662f\u5f62\u6210ActionBar).\u4e3a\u4e86\u8ba9\u8fd9\u4e2a\u65b9\u6cd5\u63a5\u6536\u5230\u8c03\u7528,\u4f60\u5fc5\u987b\u5728onCreate()\u65b9\u6cd5\u4e2d\u8c03\u7528setHasOptionsMenu()\u65b9\u6cd5\u6765\u8868\u660e\u8fd9\u4e2aFragment\u5141\u8bb8\u5728Options Menu\u4e2d\u589e\u52a0\u9879(\u5426\u5219,Fragment\u5c06\u4e0d\u80fd\u63a5\u6536onCreateOptionsMenu()\u7684\u8c03\u7528).\n<\/p><p><br \/>\nAny items that you then add to the Options Menu from the fragment are appended to the existing menu items. The fragment also receives callbacks to onOptionsItemSelected() when a menu item is selected.\n<\/p><p>\u4f60\u4eceFragment \u6dfb\u52a0\u5230 Options Menu\u7684\u4efb\u4f55\u9879\u90fd\u662f\u73b0\u5b58\u83dc\u5355\u9879\u7684\u9644\u52a0\u9879.\u5728\u4e00\u4e2a\u83dc\u5355\u9879\u9009\u4e2d\u7684\u65f6\u5019,Fragment\u4e5f\u63a5\u6536\u54cd\u5e94onOptionsItemSelected()\u65b9\u6cd5\u7684\u8c03\u7528.\n<\/p><p><br \/>\nYou can also register a view in your fragment layout to provide a context menu by calling registerForContextMenu(). When the user opens the context menu, the fragment receives a call to onCreateContextMenu(). When the user selects an item, the fragment receives a call to onContextItemSelected().\n<\/p><p>\u4f60\u4e5f\u53ef\u4ee5\u5728\u4f60\u7684Fragment\u89c6\u56fe\u4e2d\u901a\u8fc7\u8c03\u7528registerForContextMenu()\u65b9\u6cd5\u6765\u6ce8\u518c\u4e00\u4e2a\u89c6\u56fe,\u4ece\u800c\u63d0\u4f9b\u4e00\u4e2a\u4e0a\u4e0b\u6587\u83dc\u5355.\u5f53\u7528\u6237\u6253\u5f00\u4e0a\u4e0b\u6587\u83dc\u5355\u65f6,Fragment\u4f1a\u63a5\u6536\u4e00\u4e2aonCreateContextMenu()\u7684\u8c03\u7528,\u5f53\u7528\u6237\u9009\u62e9\u4e00\u9879\u7684\u65f6\u5019,Fragment\u63a5\u6536\u4e00\u4e2aonContextItemSelected()\u7684\u8c03\u7528.\n<\/p>\n<div style=\"margin: 1em 0; padding: 10px; overflow: auto; background: #F7F7F7; border-left:4px solid; border-color:#258AAF;\">\n<p>Note: Although your fragment receives an on-item-selected callback for each menu item it adds, the activity is first to receive the respective callback when the user selects a menu item. If the activity's implementation of the on-item-selected callback does not handle the selected item, then the event is passed to the fragment's callback. This is true for the Options Menu and context menus.\n\u6ce8\u610f.\u5373\u4f7f\u4f60\u7684Fragment\u5728\u6bcf\u4e2a\u6dfb\u52a0\u7684\u83dc\u5355\u9879\u63a5\u6536\u4e86\u4e00\u4e2aon-item-selected\u8c03\u7528,\u5728\u7528\u6237\u9009\u62e9\u4e00\u4e2a\u83dc\u5355\u9879\u7684\u65f6\u5019,Activity\u662f\u7b2c\u4e00\u4e2a\u63a5\u53d7\u5404\u81ea\u8c03\u7528\u7684\u7ec4\u4ef6.\u5982\u679cActivity\u5b9e\u73b0\u7684on-item-selected\u8c03\u7528\u6ca1\u6709\u5904\u7406\u9009\u62e9\u9879\u540e\u7684\u4e8b\u4ef6,\u90a3\u8fd9\u4e2a\u4e8b\u4ef6\u4f1a\u4f20\u9012\u5230Fragment\u7684\u56de\u8c03\u4e2d.\u8fd9\u5bf9 Options Menu \u548c\u4e0a\u4e0b\u6587\u83dc\u5355\u90fd\u662f\u9002\u7528\u7684.\n<\/p>\n<\/div>\n<p>For more information about menus, see the Menus and Action Bar developer guides.\n\u66f4\u591a\u5173\u4e8e\u83dc\u5355\u7684\u4fe1\u606f,\u53c2\u8003Menus and Action Bar\u4e00\u6587.\n<\/p>\n<h2> <span class=\"mw-headline\" id=\"Handling_the_Fragment_Lifecycle-.E5.A4.84.E7.90.86Fragment.E7.9A.84.E7.94.9F.E5.91.BD.E5.91.A8.E6.9C.9F\">Handling the Fragment Lifecycle-\u5904\u7406Fragment\u7684\u751f\u547d\u5468\u671f<\/span><\/h2>\n<p><img src=\"http:\/\/docs.eoeandroid.com\/images\/activity_fragment_lifecycle.png\" alt=\"activity_fragment_lifecycle.png\" \/>\n<\/p><p>Figure 3. The effect of the activity lifecycle on the fragment lifecycle.\n\u56fe\u4e09 Activity\u751f\u547d\u5468\u671f\u505aFragment\u751f\u547d\u5468\u671f\u7684\u5f71\u54cd\n<\/p><p>Managing the lifecycle of a fragment is a lot like managing the lifecycle of an activity. Like an activity, a fragment can exist in three states:\n<\/p><p>\u51fa\u6765Fragment\u7684\u751f\u547d\u5468\u671f\u548c\u5904\u7406Activity\u7684\u751f\u547d\u5468\u671f\u5f88\u76f8\u4f3c.\u548cActivity\u4e00\u6837,Fragment\u7684\u751f\u547d\u5468\u671f\u6709\u4e00\u4e0b\u4e09\u4e2a\u72b6\u6001:\n<\/p><p>Resumed\n<\/p>\n<dl><dd>The fragment is visible in the running activity.\n<\/dd><dd>Fragment\u5728\u8fd0\u884c\u4e2d\u7684Activity\u4e2d\u53ef\u89c1\n<\/dd><\/dl>\n<p>Paused\n<\/p>\n<dl><dd>Another activity is in the foreground and has focus, but the activity in which this fragment lives is still visible (the foreground activity is partially transparent or doesn't cover the entire screen).\n<\/dd><dd>\u53e6\u4e00\u4e2aActivity\u5728\u524d\u53f0\u6216\u8005\u83b7\u5f97\u4e86\u7126\u70b9,\u4f46\u662fFragment\u6240\u5728\u7684Activity\u4ecd\u7136\u53ef\u4ee5\u770b\u5230(\u53ef\u80fd\u662f\u524d\u53f0Activity\u5360\u636e\u4e86\u5c4f\u5e55\u7684\u4e00\u90e8\u5206\u6216\u8005\u662f\u534a\u900f\u660e\u7684)\n<\/dd><\/dl>\n<p>Stopped\n<\/p>\n<dl><dd>The fragment is not visible. Either the host activity has been stopped or the fragment has been removed from the activity but added to the back stack. A stopped fragment is still alive (all state and member information is retained by the system). However, it is no longer visible to the user and will be killed if the activity is killed.\n<\/dd><dd>Fragment\u4e0d\u53ef\u89c1.\u5bbf\u4e3bActivity\u53ef\u80fd\u5df2\u7ecf\u88ab\u505c\u6b62\u4e86\u6216\u8005\u8fd9\u4e2aFragment\u5df2\u7ecf\u4ece\u8fd9\u4e2aActivity\u4e2d\u79fb\u9664\u4e86\u5e76\u88ab\u6dfb\u52a0\u5230\u4e86\u8fd4\u56de\u6808.\u4e00\u4e2a\u505c\u6b62\u7684Fragment\u4ecd\u7136\u662f\u5b58\u6d3b\u7684(\u6240\u6709\u7684\u72b6\u6001\u548c\u6210\u5458\u4fe1\u606f\u88ab\u7cfb\u7edf\u4fdd\u5b58\u7740).\u7136\u800c\u4ed6\u4e0d\u518d\u5bf9Activity\u53ef\u89c1,\u5982\u679c\u5bbf\u4e3bActivity\u88ab\u6740\u6b7b\u4e86,\u4ed6\u4e5f\u4f1a\u88ab\u6740\u6b7b.\n<\/dd><\/dl>\n<p>Also like an activity, you can retain the state of a fragment using a Bundle, in case the activity's process is killed and you need to restore the fragment state when the activity is recreated. You can save the state during the fragment's onSaveInstanceState() callback and restore it during either onCreate(), onCreateView(), or onActivityCreated(). For more information about saving state, see the Activities document.\n<\/p><p>\u548cActivity\u4e00\u6837,\u5728\u8fd9\u4e2aActivity\u6240\u5728\u7684\u8fdb\u7a0b\u88ab\u6740\u6b7b\u6216\u8005\u4f60\u9700\u8981\u5728Activity\u91cd\u65b0\u521b\u5efa\u7684\u65f6\u5019\u4fdd\u5b58Fragment\u7684\u72b6\u6001,\u4f60\u53ef\u4ee5\u7528Bundle\u6765\u505a\u8fd9\u4e2a\u5de5\u4f5c.\u4f60\u53ef\u4ee5\u5728Fragment\u6267\u884conSaveInstanceState()\u65b9\u6cd5\u7684\u65f6\u5019\u4fdd\u5b58\u5b83\u7684\u72b6\u6001,\u7136\u540e\u5728onCreate()\u6216\u8005onCreateView(),onActivityCreated()\u65b9\u6cd5\u7684\u65f6\u5019\u6062\u590d\u8fd9\u4e9b\u72b6\u6001.\u66f4\u591a\u5173\u4e8e\u4fdd\u5b58\u72b6\u6001\u7684\u5185\u5bb9\u53c2\u8003Activity\u6587\u6863.\n<\/p><p><br \/>\nThe most significant difference in lifecycle between an activity and a fragment is how one is stored in its respective back stack. An activity is placed into a back stack of activities that's managed by the system when it's stopped, by default (so that the user can navigate back to it with the Back button, as discussed in Tasks and Back Stack). However, a fragment is placed into a back stack managed by the host activity only when you explicitly request that the instance be saved by calling addToBackStack() during a transaction that removes the fragment.\n<\/p><p>Activity\u548cFragment\u6700\u5927\u7684\u4e0d\u540c\u662f\u4ed6\u4eec\u5728\u8fd4\u56de\u6808\u4e2d\u7684\u5b58\u5728\u5f62\u5f0f.\u9ed8\u8ba4\u7684,Activity\u5728\u505c\u6b62\u7684\u65f6\u5019,\u662f\u653e\u5728\u4e00\u4e2a\u88ab\u7cfb\u7edf\u7ba1\u7406\u7684\u8fd4\u56de\u6808\u4e2d(\u8fd9\u6837\u7528\u6237\u53ef\u4ee5\u4f7f\u7528back\u6309\u94ae\u8fd4\u56de,\u5c31\u50cf\u5728Tasks and Back Stack\u4e00\u7ae0\u4e2d\u8c08\u8bba\u7684\u90a3\u6837).\u7136\u800c\u5728\u4e00\u4e2a\u79fb\u9664Fragment\u7684\u4e8b\u52a1\u4e2d,\u53ea\u6709\u5728\u4f60\u901a\u8fc7\u8c03\u7528addToBackStack()\u660e\u786e\u7684\u6307\u660e\u8fd9\u4e2aFragment\u4e0d\u8981\u88ab\u4fdd\u5b58,\u8fd9\u4e2aFragment\u624d\u4f1a\u88ab\u653e\u5728\u88ab\u5bbf\u4e3bActivity\u7ba1\u7406\u7684\u8fd4\u56de\u6808\u4e2d.\n<\/p><p><br \/>\nOtherwise, managing the fragment lifecycle is very similar to managing the activity lifecycle. So, the same practices for managing the activity lifecycle also apply to fragments. What you also need to understand, though, is how the life of the activity affects the life of the fragment.\n<\/p><p>\u53e6\u5916,\u7ba1\u7406Fragment\u7684\u751f\u547d\u5468\u671f\u548c\u7ba1\u7406Activity\u7684\u751f\u547d\u5468\u671f\u5f88\u76f8\u4f3c.\u6240\u4ee5,\u5f53\u7ba1\u7406Activity\u751f\u547d\u5468\u671f\u7684\u65b9\u6cd5\u4e5f\u9002\u4e8e\u7ba1\u7406Fragment\u7684\u751f\u547d\u5468\u671f.\u5f53\u7136\u4f60\u4e5f\u9700\u8981\u660e\u786eActivity\u5bf9Fragment\u751f\u547d\u5468\u671f\u7684\u5f71\u54cd.\n<\/p>\n<div style=\"margin: 1em 0; padding: 10px; overflow: auto; background: #F7F7F7; border-left:4px solid; border-color:#FF7F00;\">\n<p>Caution: If you need a Context object within your Fragment, you can call getActivity(). However, be careful to call getActivity() only when the fragment is attached to an activity. When the fragment is not yet attached, or was detached during the end of its lifecycle, getActivity() will return null.\n\u6ce8\u610f,\u5982\u679c\u5728\u4f60\u7684Fragment\u4e2d\u9700\u8981\u4e00\u4e2acontext\u5bf9\u8c61,\u4f60\u53ef\u4ee5\u8c03\u7528getActivity.\u7136\u800c,\u53ea\u6709\u8fd9\u4e2aFragment\u9644\u5728\u8fd9\u4e2aActivity\u4e0a\u7684\u65f6\u5019,\u624d\u53ef\u4ee5\u8c03\u7528getActivity().\u5982\u679cFragment\u8fd8\u6ca1\u6709\u9644\u52a0\u5728Activity\u4e0a,\u6216\u8005\u5728\u6700\u540e\u7684\u751f\u547d\u5468\u671f\u548cActivity\u5206\u79bb\u4e86,\u90a3getActivity()\u65b9\u6cd5\u5c06\u4f1a\u8fd4\u56denull.\n<\/p>\n<\/div>\n<h3> <span class=\"mw-headline\" id=\"Coordinating_with_the_activity_lifecycle-.E5.92.8CActivity.E7.94.9F.E5.91.BD.E5.91.A8.E6.9C.9F.E7.9A.84.E5.8D.8F.E8.B0.83\">Coordinating with the activity lifecycle-\u548cActivity\u751f\u547d\u5468\u671f\u7684\u534f\u8c03<\/span><\/h3>\n<p>The lifecycle of the activity in which the fragment lives directly affects the lifecycle of the fragment, such that each lifecycle callback for the activity results in a similar callback for each fragment. For example, when the activity receives onPause(), each fragment in the activity receives onPause().\n<\/p><p>\u62e5\u6709Fragment\u7684Activity\u7684\u751f\u547d\u5468\u671f\u4f1a\u76f4\u63a5\u5f71\u54cdFragment\u7684\u751f\u547d\u5468\u671f,\u6bcf\u4e2aActivity\u751f\u547d\u5468\u671f\u65b9\u6cd5\u4f1a\u5f71\u54cd\u5230\u6bcf\u4e2aFragment.\u4e3e\u4e2a\u4f8b\u5b50,\u5f53\u4e00\u4e2aActivity\u6267\u884conPause()\u65b9\u6cd5\u7684\u65f6\u5019,\u5b83\u91cc\u9762\u7684\u6bcf\u4e2aFragment\u4e5f\u4f1a\u6267\u884conPause().\n<\/p><p><br \/>\nFragments have a few extra lifecycle callbacks, however, that handle unique interaction with the activity in order to perform actions such as build and destroy the fragment's UI. These additional callback methods are:\n<\/p><p>Fragment\u6709\u4e00\u4e9b\u989d\u5916\u7684\u751f\u547d\u5468\u671f,\u7528\u6765\u5904\u7406\u548cActivity\u7684\u7279\u6b8a\u4ea4\u6362,\u4ece\u800c\u53ef\u4ee5\u6267\u884c\u5f62\u5982\u521b\u5efa\u548c\u9500\u6bc1FragmentUI\u7684\u4e8b\u60c5.\u8fd9\u4e9b\u989d\u5916\u7684\u56de\u8c03\u65b9\u6cd5\u6709:\n<\/p><p>onAttach()\n<\/p>\n<dl><dd>Called when the fragment has been associated with the activity (the Activity is passed in here).\n<\/dd><dd>\u5f53Fragment\u548cActivity\u94fe\u63a5\u8d77\u6765\u7684\u65f6\u5019\u8c03\u7528(Activity\u5728\u8fd9\u91cc\u4f20\u9001\u8fc7\u6765).\n<\/dd><\/dl>\n<p>onCreateView()\n<\/p>\n<dl><dd>Called to create the view hierarchy associated with the fragment.\n<\/dd><dd>\u521b\u5efaFragment\u7684\u89c6\u56fe\u5c42.\n<\/dd><\/dl>\n<p>onActivityCreated()\n<\/p>\n<dl><dd>Called when the activity's onCreate() method has returned.\n<\/dd><dd>\u5f53Activity\u7684onCreate\u8fd4\u56de\u7684\u65f6\u5019\u6267\u884c.\n<\/dd><\/dl>\n<p>onDestroyView()\n<\/p>\n<dl><dd>Called when the view hierarchy associated with the fragment is being removed.\n<\/dd><dd>\u5f53Fragment\u7684\u8bd5\u56fe\u5c42\u88ab\u79fb\u9664\u7684\u65f6\u5019\u6267\u884c.\n<\/dd><\/dl>\n<p>onDetach()\n<\/p>\n<dl><dd>Called when the fragment is being disassociated from the activity.\n<\/dd><dd>\u5f53Fragment\u548cActivity\u5206\u79bb\u7684\u65f6\u5019\u6267\u884c.\n<\/dd><\/dl>\n<p>The flow of a fragment's lifecycle, as it is affected by its host activity, is illustrated by figure 3. In this figure, you can see how each successive state of the activity determines which callback methods a fragment may receive. For example, when the activity has received its onCreate() callback, a fragment in the activity receives no more than the onActivityCreated() callback.\n<\/p><p>Fragment\u751f\u547d\u5468\u671f\u7684\u6d41\u56fe,\u7531\u4e8e\u88ab\u5bbf\u4e3bActivity\u5f71\u54cd,\u53ef\u4ee5\u7528\u56fe\u4e09\u8868\u793a.\u5728\u8fd9\u4e2a\u8868\u4e2d,\u4f60\u53ef\u4ee5\u77e5\u9053\u6bcf\u4e2aActivity\u7684\u6bcf\u4e2a\u72b6\u6001\u662f\u600e\u6837\u51b3\u5b9a\u4e00\u4e2aFragment\u6536\u5230\u7684\u56de\u8c03\u65b9\u6cd5\u7684.\u6bd4\u5982,\u5f53\u4e00\u4e2aActivity\u6536\u5230\u4ed6\u7684onCreate()\u65b9\u6cd5\u7684\u65f6\u5019,\u4ed6\u91cc\u5417\u7684Fragment\u4e0d\u4f1a\u518d\u6536\u5230onActivityCreated()\u65b9\u6cd5\u7684\u56de\u8c03.\n<\/p><p><br \/>\nOnce the activity reaches the resumed state, you can freely add and remove fragments to the activity. Thus, only while the activity is in the resumed state can the lifecycle of a fragment change independently.\n<\/p><p>\u4e00\u65e6Activity\u5230\u8fbe\u4e86resume\u72b6\u6001,\u4f60\u53ef\u4ee5\u968f\u610f\u6dfb\u52a0\u548c\u79fb\u9664Activity\u4e2d\u7684Fragment.\u5f53\u7136,\u53ea\u6709\u8fd9\u4e2aActivity\u5728resume\u72b6\u6001\u7684\u65f6\u5019,Fragment\u7684\u751f\u547d\u5468\u671f\u624d\u53ef\u4ee5\u72ec\u7acb\u7684\u53d8\u5316.\n<\/p><p><br \/>\nHowever, when the activity leaves the resumed state, the fragment again is pushed through its lifecycle by the activity.\n<\/p><p>\u7136\u800c,\u5f53activity\u79bb\u5f00\u4e86resume\u72b6\u6001,Fragment\u4f1a\u518d\u4e00\u6b21\u88abactivity\u63a8\u5230\u5b83\u7684\u751f\u547d\u5468\u671f\u4e2d.\n<\/p><p><b>==Example-\u4f8b\u5b50==<\/b>\n<\/p><p>To bring everything discussed in this document together, here's an example of an activity using two fragments to create a two-pane layout. The activity below includes one fragment to show a list of Shakespeare play titles and another to show a summary of the play when selected from the list. It also demonstrates how to provide different configurations of the fragments, based on the screen configuration.\n<\/p><p>\u4e3a\u4e86\u628a\u4e0a\u9762\u4ecb\u7ecd\u7684\u77e5\u8bc6\u6c47\u603b,\u8fd9\u91cc\u6709\u4e2a\u4f7f\u7528\u4e24\u4e2aFragment\u7ec4\u6210\u4e24\u4e2a\u89c6\u56fe\u5e03\u5c40\u7684\u4f8b\u5b50.\u4e0b\u9762\u7684activity\u5305\u542b\u4e24\u4e2aFragment,\u4e00\u4e2a\u7528\u6765\u663e\u793aShakespeare\u8bdd\u5267\u7684\u6807\u9898,\u53e6\u4e00\u4e2a\u7528\u6765\u663e\u793a\u9009\u4e2d\u8bdd\u5267\u7684\u7b80\u4ecb.\u4e5f\u6f14\u793a\u4e86\u600e\u4e48\u6839\u636e\u5c4f\u5e55\u7684\u4e0d\u540c\u4e3a\u8fd9\u4e24\u4e2aFragment\u63d0\u4f9b\u4e0d\u540c\u7684\u914d\u7f6e.\n<\/p>\n<div style=\"margin: 1em 0; padding: 10px; overflow: auto; background: #F7F7F7; border-left:4px solid; border-color:#258AAF;\">\n<p>Note: The complete source code for this activity is available in FragmentLayout.java.\n\u6ce8\u610f:\u5b8c\u6574\u4ee3\u7801\u5728FragmentLayout.java\u4e2d.\n<\/p>\n<\/div>\n<p>The main activity applies a layout in the usual way, during onCreate():\n<\/p><p>\u4e3bactivity\u7528\u5e73\u5e38\u7684\u65b9\u5f0f\u751f\u6210\u5e03\u5c40,\u5728onCreate()\u65b9\u6cd5\u7684\u65f6\u5019:\n<\/p>\n<pre class=\"java\">&#160;\n@Override\n<span style=\"color: #000000; font-weight: bold;\">protected<\/span> <span style=\"color: #993333;\">void<\/span> onCreate<span style=\"color: #66cc66;\">&#40;<\/span>Bundle savedInstanceState<span style=\"color: #66cc66;\">&#41;<\/span> <span style=\"color: #66cc66;\">&#123;<\/span>\n    <span style=\"color: #000000; font-weight: bold;\">super<\/span>.<span style=\"color: #006600;\">onCreate<\/span><span style=\"color: #66cc66;\">&#40;<\/span>savedInstanceState<span style=\"color: #66cc66;\">&#41;<\/span>;\n&#160;\n    setContentView<span style=\"color: #66cc66;\">&#40;<\/span>R.<span style=\"color: #006600;\">layout<\/span>.<span style=\"color: #006600;\">fragment_layout<\/span><span style=\"color: #66cc66;\">&#41;<\/span>;\n<span style=\"color: #66cc66;\">&#125;<\/span>\n&#160;<\/pre>\n<p>The layout applied is fragment_layout.xml:\nfragment_layout.xml\u5982\u4e0b:\n<\/p>\n<pre class=\"java\">&#160;\n&lt;LinearLayout xmlns:android=<span style=\"color: #ff0000;\">&quot;http:\/\/schemas.android.com\/apk\/res\/android&quot;<\/span>\n    android:orientation=<span style=\"color: #ff0000;\">&quot;horizontal&quot;<\/span>\n    android:layout_width=<span style=\"color: #ff0000;\">&quot;match_parent&quot;<\/span> android:layout_height=<span style=\"color: #ff0000;\">&quot;match_parent&quot;<\/span>&gt;\n&#160;\n    &lt;fragment <span style=\"color: #000000; font-weight: bold;\">class<\/span>=<span style=\"color: #ff0000;\">&quot;com.example.android.apis.app.FragmentLayout$TitlesFragment&quot;<\/span>\n            android:id=<span style=\"color: #ff0000;\">&quot;@+id\/titles&quot;<\/span> android:layout_weight=<span style=\"color: #ff0000;\">&quot;1&quot;<\/span>\n            android:layout_width=<span style=\"color: #ff0000;\">&quot;0px&quot;<\/span> android:layout_height=<span style=\"color: #ff0000;\">&quot;match_parent&quot;<\/span> \/&gt;\n&#160;\n    &lt;FrameLayout android:id=<span style=\"color: #ff0000;\">&quot;@+id\/details&quot;<\/span> android:layout_weight=<span style=\"color: #ff0000;\">&quot;1&quot;<\/span>\n            android:layout_width=<span style=\"color: #ff0000;\">&quot;0px&quot;<\/span> android:layout_height=<span style=\"color: #ff0000;\">&quot;match_parent&quot;<\/span>\n            android:background=<span style=\"color: #ff0000;\">&quot;?android:attr\/detailsElementBackground&quot;<\/span> \/&gt;\n&#160;\n&lt;\/LinearLayout&gt;\n&#160;<\/pre>\n<p>Using this layout, the system instantiates the TitlesFragment (which lists the play titles) as soon as the activity loads the layout, while the FrameLayout (where the fragment for showing the play summary will go) consumes space on the right side of the screen, but remains empty at first. As you'll see below, it's not until the user selects an item from the list that a fragment is placed into the FrameLayout.\n<\/p><p>\u901a\u8fc7\u5e03\u5c40\u6587\u4ef6\u6211\u4eec\u77e5\u9053,\u7cfb\u7edf\u5728activity\u8f7d\u5165\u5e03\u5c40\u7684\u65f6\u5019\u5b9e\u4f8b\u5316TitlesFragment(\u8bdd\u5267\u7684\u6807\u9898),FragmentLLayout(\u663e\u793a\u8bdd\u5267\u5185\u5bb9\u7b80\u4ecb\u7684Fragment)\u5360\u636e\u53f3\u8fb9\u7684\u5c4f\u5e55\u4f46\u662f\u73b0\u5728\u6ca1\u6709\u5185\u5bb9.\u5c31\u50cf\u4f60\u4e0b\u9762\u770b\u5230\u7684\u90a3\u6837,\u76f4\u5230\u7528\u6237\u9009\u62e9\u4e86\u6807\u9898\u4e00\u4e2aFragment\u624d\u4f1a\u88ab\u653e\u5230FrameLayout.\n<\/p><p><br \/>\nHowever, not all screen configurations are wide enough to show both the list of plays and the summary, side by side. So, the layout above is used only for the landscape screen configuration, by saving it at res\/layout-land\/fragment_layout.xml.\n<\/p><p>\u7136\u800c,\u4e0d\u662f\u591a\u6709\u7684\u5c4f\u5e55\u914d\u7f6e\u90fd\u8db3\u591f\u663e\u793a\u8fd9\u4e24\u4e2aFragment\u89c6\u56fe.\u6309\u7167res\/layout-land\/fragment_layout.xml\u6587\u4ef6,\u4e0a\u9762\u7684\u5e03\u5c40\u53ea\u9002\u5408\u6a2a\u5c4f.\n<\/p><p><br \/>\nThus, when the screen is in portrait orientation, the system applies the following layout, which is saved at res\/layout\/fragment_layout.xml:\n<\/p><p>\u90a3\u4e48\u5f53\u5c4f\u5e55\u5728\u7ad6\u5c4f\u7684\u65f6\u5019,\u7cfb\u7edf\u4f1a\u4f7f\u7528\u4e0b\u9762\u7684\u5e03\u5c40,\u4fdd\u5b58\u5728res\/layout\/fragment_layout.xml\u4e2d.\n<\/p>\n<pre class=\"java\">&#160;\n&lt;FrameLayout xmlns:android=<span style=\"color: #ff0000;\">&quot;http:\/\/schemas.android.com\/apk\/res\/android&quot;<\/span>\n    android:layout_width=<span style=\"color: #ff0000;\">&quot;match_parent&quot;<\/span> android:layout_height=<span style=\"color: #ff0000;\">&quot;match_parent&quot;<\/span>&gt;\n    &lt;fragment <span style=\"color: #000000; font-weight: bold;\">class<\/span>=<span style=\"color: #ff0000;\">&quot;com.example.android.apis.app.FragmentLayout$TitlesFragment&quot;<\/span>\n            android:id=<span style=\"color: #ff0000;\">&quot;@+id\/titles&quot;<\/span>\n            android:layout_width=<span style=\"color: #ff0000;\">&quot;match_parent&quot;<\/span> android:layout_height=<span style=\"color: #ff0000;\">&quot;match_parent&quot;<\/span> \/&gt;\n&lt;\/FrameLayout&gt;\n&#160;<\/pre>\n<p>This layout includes only TitlesFragment. This means that, when the device is in portrait orientation, only the list of play titles is visible. So, when the user clicks a list item in this configuration, the application will start a new activity to show the summary, instead of loading a second fragment.\n<\/p><p>\u8fd9\u4e2a\u5e03\u5c40\u503c\u5305\u542bTitlesFragment.\u8fd9\u610f\u5473\u7740\u5f53\u8bbe\u5907\u5728\u7ad6\u5c4f\u7684\u65f6\u5019,\u53ea\u6709\u8bdd\u5267\u7684\u6807\u9898\u662f\u53ef\u89c1\u7684.\u6240\u4ee5,\u5f53\u7528\u6237\u70b9\u51fb\u5217\u8868\u7684\u4e00\u9879\u7684\u65f6\u5019,\u5e94\u7528\u5c06\u4f1a\u5f00\u59cb\u4e00\u4e2a\u65b0\u7684activity\u6765\u663e\u793a\u7b80\u4ecb\u800c\u4e0d\u662f\u8f7d\u5165\u7b2c\u4e8c\u4e2aFragment.\n<\/p><p><br \/>\nNext, you can see how this is accomplished in the fragment classes. First is TitlesFragment, which shows the list of Shakespeare play titles. This fragment extends ListFragment and relies on it to handle most of the list view work.\n<\/p><p>\u63a5\u4e0b\u6765,\u4f60\u5c06\u770b\u5230\u8fd9\u5728Fragment\u7c7b\u4e2d\u662f\u600e\u4e48\u5b9e\u73b0\u7684.\u9996\u5148\u662fTitleFragment,\u663e\u793a\u4e86\u838e\u58eb\u6bd4\u4e9a\u8bdd\u5267\u7684\u6807\u9898.\u8fd9\u4e2aFragment\u7ee7\u627f\u81eaListFragment,\u53ef\u4ee5\u901a\u8fc7\u5b83\u5b9e\u73b0\u5927\u591a\u6570\u663e\u793a\u5217\u8868\u4fe1\u606f\u64cd\u4f5c.\n<\/p><p><br \/>\nAs you inspect this code, notice that there are two possible behaviors when the user clicks a list item: depending on which of the two layouts is active, it can either create and display a new fragment to show the details in the same activity (adding the fragment to the FrameLayout), or start a new activity (where the fragment can be shown).\n<\/p><p>\u6b63\u5982\u4f60\u770b\u5230\u7684\u90a3\u6837,\u6ce8\u610f\u5728\u7528\u6237\u70b9\u51fb\u5217\u8868\u54cd\u7684\u65f6\u5019,\u6709\u4e24\u4e2a\u53ef\u80fd\u7684\u884c\u4e3a:\u5982\u679c\u8fd9\u4e24\u4e2a\u89c6\u56fe\u5b58\u5728,\u5c06\u5728\u8fd9\u4e2aactivity\u4e2d\u521b\u5efa\u5e76\u663e\u793a\u4e00\u4e2a\u65b0\u7684Fragment(\u628aFragment\u6dfb\u52a0\u5230FragmentLayout\u4e2d);\u5982\u679c\u53ea\u6709\u4e00\u4e2a\u89c6\u56fe(\u7ad6\u5c4f),\u90a3\u4f1a\u542f\u52a8\u4e00\u4e2a\u65b0\u7684activity(Fragment\u5728\u8fd9\u4e2aactivity\u4e2d\u663e\u793a).\n<\/p>\n<pre class=\"java\">&#160;\n<span style=\"color: #000000; font-weight: bold;\">public<\/span> <span style=\"color: #000000; font-weight: bold;\">static<\/span> <span style=\"color: #000000; font-weight: bold;\">class<\/span> TitlesFragment <span style=\"color: #000000; font-weight: bold;\">extends<\/span> ListFragment <span style=\"color: #66cc66;\">&#123;<\/span>\n    <span style=\"color: #993333;\">boolean<\/span> mDualPane;\n    <span style=\"color: #993333;\">int<\/span> mCurCheckPosition = <span style=\"color: #cc66cc;\">0<\/span>;\n&#160;\n    @Override\n    <span style=\"color: #000000; font-weight: bold;\">public<\/span> <span style=\"color: #993333;\">void<\/span> onActivityCreated<span style=\"color: #66cc66;\">&#40;<\/span>Bundle savedInstanceState<span style=\"color: #66cc66;\">&#41;<\/span> <span style=\"color: #66cc66;\">&#123;<\/span>\n        <span style=\"color: #000000; font-weight: bold;\">super<\/span>.<span style=\"color: #006600;\">onActivityCreated<\/span><span style=\"color: #66cc66;\">&#40;<\/span>savedInstanceState<span style=\"color: #66cc66;\">&#41;<\/span>;\n&#160;\n        <span style=\"color: #808080; font-style: italic;\">\/\/ Populate list with our static array of titles.<\/span>\n        setListAdapter<span style=\"color: #66cc66;\">&#40;<\/span><span style=\"color: #000000; font-weight: bold;\">new<\/span> ArrayAdapter&lt;String&gt;<span style=\"color: #66cc66;\">&#40;<\/span>getActivity<span style=\"color: #66cc66;\">&#40;<\/span><span style=\"color: #66cc66;\">&#41;<\/span>,\n                android.<span style=\"color: #006600;\">R<\/span>.<span style=\"color: #006600;\">layout<\/span>.<span style=\"color: #006600;\">simple_list_item_activated_1<\/span>, Shakespeare.<span style=\"color: #006600;\">TITLES<\/span><span style=\"color: #66cc66;\">&#41;<\/span><span style=\"color: #66cc66;\">&#41;<\/span>;\n&#160;\n        <span style=\"color: #808080; font-style: italic;\">\/\/ Check to see if we have a frame in which to embed the details<\/span>\n        <span style=\"color: #808080; font-style: italic;\">\/\/ fragment directly in the containing UI.<\/span>\n        <a href=\"http:\/\/www.google.com\/search?hl=en&amp;q=allinurl%3AView+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span style=\"color: #aaaadd; font-weight: bold;\">View<\/span><\/a> detailsFrame = getActivity<span style=\"color: #66cc66;\">&#40;<\/span><span style=\"color: #66cc66;\">&#41;<\/span>.<span style=\"color: #006600;\">findViewById<\/span><span style=\"color: #66cc66;\">&#40;<\/span>R.<span style=\"color: #006600;\">id<\/span>.<span style=\"color: #006600;\">details<\/span><span style=\"color: #66cc66;\">&#41;<\/span>;\n        mDualPane = detailsFrame&#160;!= <span style=\"color: #000000; font-weight: bold;\">null<\/span> &amp;&amp; detailsFrame.<span style=\"color: #006600;\">getVisibility<\/span><span style=\"color: #66cc66;\">&#40;<\/span><span style=\"color: #66cc66;\">&#41;<\/span> == <a href=\"http:\/\/www.google.com\/search?hl=en&amp;q=allinurl%3AView+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span style=\"color: #aaaadd; font-weight: bold;\">View<\/span><\/a>.<span style=\"color: #006600;\">VISIBLE<\/span>;\n&#160;\n        <span style=\"color: #b1b100;\">if<\/span> <span style=\"color: #66cc66;\">&#40;<\/span>savedInstanceState&#160;!= <span style=\"color: #000000; font-weight: bold;\">null<\/span><span style=\"color: #66cc66;\">&#41;<\/span> <span style=\"color: #66cc66;\">&#123;<\/span>\n            <span style=\"color: #808080; font-style: italic;\">\/\/ Restore last state for checked position.<\/span>\n            mCurCheckPosition = savedInstanceState.<span style=\"color: #006600;\">getInt<\/span><span style=\"color: #66cc66;\">&#40;<\/span><span style=\"color: #ff0000;\">&quot;curChoice&quot;<\/span>, <span style=\"color: #cc66cc;\">0<\/span><span style=\"color: #66cc66;\">&#41;<\/span>;\n        <span style=\"color: #66cc66;\">&#125;<\/span>\n&#160;\n        <span style=\"color: #b1b100;\">if<\/span> <span style=\"color: #66cc66;\">&#40;<\/span>mDualPane<span style=\"color: #66cc66;\">&#41;<\/span> <span style=\"color: #66cc66;\">&#123;<\/span>\n            <span style=\"color: #808080; font-style: italic;\">\/\/ In dual-pane mode, the list view highlights the selected item.<\/span>\n            getListView<span style=\"color: #66cc66;\">&#40;<\/span><span style=\"color: #66cc66;\">&#41;<\/span>.<span style=\"color: #006600;\">setChoiceMode<\/span><span style=\"color: #66cc66;\">&#40;<\/span><a href=\"http:\/\/www.google.com\/search?hl=en&amp;q=allinurl%3AListView+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span style=\"color: #aaaadd; font-weight: bold;\">ListView<\/span><\/a>.<span style=\"color: #006600;\">CHOICE_MODE_SINGLE<\/span><span style=\"color: #66cc66;\">&#41;<\/span>;\n            <span style=\"color: #808080; font-style: italic;\">\/\/ Make sure our UI is in the correct state.<\/span>\n            showDetails<span style=\"color: #66cc66;\">&#40;<\/span>mCurCheckPosition<span style=\"color: #66cc66;\">&#41;<\/span>;\n        <span style=\"color: #66cc66;\">&#125;<\/span>\n    <span style=\"color: #66cc66;\">&#125;<\/span>\n&#160;\n    @Override\n    <span style=\"color: #000000; font-weight: bold;\">public<\/span> <span style=\"color: #993333;\">void<\/span> onSaveInstanceState<span style=\"color: #66cc66;\">&#40;<\/span>Bundle outState<span style=\"color: #66cc66;\">&#41;<\/span> <span style=\"color: #66cc66;\">&#123;<\/span>\n        <span style=\"color: #000000; font-weight: bold;\">super<\/span>.<span style=\"color: #006600;\">onSaveInstanceState<\/span><span style=\"color: #66cc66;\">&#40;<\/span>outState<span style=\"color: #66cc66;\">&#41;<\/span>;\n        outState.<span style=\"color: #006600;\">putInt<\/span><span style=\"color: #66cc66;\">&#40;<\/span><span style=\"color: #ff0000;\">&quot;curChoice&quot;<\/span>, mCurCheckPosition<span style=\"color: #66cc66;\">&#41;<\/span>;\n    <span style=\"color: #66cc66;\">&#125;<\/span>\n&#160;\n    @Override\n    <span style=\"color: #000000; font-weight: bold;\">public<\/span> <span style=\"color: #993333;\">void<\/span> onListItemClick<span style=\"color: #66cc66;\">&#40;<\/span><a href=\"http:\/\/www.google.com\/search?hl=en&amp;q=allinurl%3AListView+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span style=\"color: #aaaadd; font-weight: bold;\">ListView<\/span><\/a> l, <a href=\"http:\/\/www.google.com\/search?hl=en&amp;q=allinurl%3AView+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span style=\"color: #aaaadd; font-weight: bold;\">View<\/span><\/a> v, <span style=\"color: #993333;\">int<\/span> position, <span style=\"color: #993333;\">long<\/span> id<span style=\"color: #66cc66;\">&#41;<\/span> <span style=\"color: #66cc66;\">&#123;<\/span>\n        showDetails<span style=\"color: #66cc66;\">&#40;<\/span>position<span style=\"color: #66cc66;\">&#41;<\/span>;\n    <span style=\"color: #66cc66;\">&#125;<\/span>\n&#160;\n    <span style=\"color: #808080; font-style: italic;\">\/**\n     * Helper function to show the details of a selected item, either by\n     * displaying a fragment in-place in the current UI, or starting a\n     * whole new activity in which it is displayed.\n     *\/<\/span>\n    <span style=\"color: #993333;\">void<\/span> showDetails<span style=\"color: #66cc66;\">&#40;<\/span><span style=\"color: #993333;\">int<\/span> index<span style=\"color: #66cc66;\">&#41;<\/span> <span style=\"color: #66cc66;\">&#123;<\/span>\n        mCurCheckPosition = index;\n&#160;\n        <span style=\"color: #b1b100;\">if<\/span> <span style=\"color: #66cc66;\">&#40;<\/span>mDualPane<span style=\"color: #66cc66;\">&#41;<\/span> <span style=\"color: #66cc66;\">&#123;<\/span>\n            <span style=\"color: #808080; font-style: italic;\">\/\/ We can display everything in-place with fragments, so update<\/span>\n            <span style=\"color: #808080; font-style: italic;\">\/\/ the list to highlight the selected item and show the data.<\/span>\n            getListView<span style=\"color: #66cc66;\">&#40;<\/span><span style=\"color: #66cc66;\">&#41;<\/span>.<span style=\"color: #006600;\">setItemChecked<\/span><span style=\"color: #66cc66;\">&#40;<\/span>index, <span style=\"color: #000000; font-weight: bold;\">true<\/span><span style=\"color: #66cc66;\">&#41;<\/span>;\n&#160;\n            <span style=\"color: #808080; font-style: italic;\">\/\/ Check what fragment is currently shown, replace if needed.<\/span>\n            DetailsFragment details = <span style=\"color: #66cc66;\">&#40;<\/span>DetailsFragment<span style=\"color: #66cc66;\">&#41;<\/span>\n                    getFragmentManager<span style=\"color: #66cc66;\">&#40;<\/span><span style=\"color: #66cc66;\">&#41;<\/span>.<span style=\"color: #006600;\">findFragmentById<\/span><span style=\"color: #66cc66;\">&#40;<\/span>R.<span style=\"color: #006600;\">id<\/span>.<span style=\"color: #006600;\">details<\/span><span style=\"color: #66cc66;\">&#41;<\/span>;\n            <span style=\"color: #b1b100;\">if<\/span> <span style=\"color: #66cc66;\">&#40;<\/span>details == <span style=\"color: #000000; font-weight: bold;\">null<\/span> || details.<span style=\"color: #006600;\">getShownIndex<\/span><span style=\"color: #66cc66;\">&#40;<\/span><span style=\"color: #66cc66;\">&#41;<\/span>&#160;!= index<span style=\"color: #66cc66;\">&#41;<\/span> <span style=\"color: #66cc66;\">&#123;<\/span>\n                <span style=\"color: #808080; font-style: italic;\">\/\/ Make new fragment to show this selection.<\/span>\n                details = DetailsFragment.<span style=\"color: #006600;\">newInstance<\/span><span style=\"color: #66cc66;\">&#40;<\/span>index<span style=\"color: #66cc66;\">&#41;<\/span>;\n&#160;\n                <span style=\"color: #808080; font-style: italic;\">\/\/ Execute a transaction, replacing any existing fragment<\/span>\n                <span style=\"color: #808080; font-style: italic;\">\/\/ with this one inside the frame.<\/span>\n                FragmentTransaction ft = getFragmentManager<span style=\"color: #66cc66;\">&#40;<\/span><span style=\"color: #66cc66;\">&#41;<\/span>.<span style=\"color: #006600;\">beginTransaction<\/span><span style=\"color: #66cc66;\">&#40;<\/span><span style=\"color: #66cc66;\">&#41;<\/span>;\n                ft.<span style=\"color: #006600;\">replace<\/span><span style=\"color: #66cc66;\">&#40;<\/span>R.<span style=\"color: #006600;\">id<\/span>.<span style=\"color: #006600;\">details<\/span>, details<span style=\"color: #66cc66;\">&#41;<\/span>;\n                ft.<span style=\"color: #006600;\">setTransition<\/span><span style=\"color: #66cc66;\">&#40;<\/span>FragmentTransaction.<span style=\"color: #006600;\">TRANSIT_FRAGMENT_FADE<\/span><span style=\"color: #66cc66;\">&#41;<\/span>;\n                ft.<span style=\"color: #006600;\">commit<\/span><span style=\"color: #66cc66;\">&#40;<\/span><span style=\"color: #66cc66;\">&#41;<\/span>;\n            <span style=\"color: #66cc66;\">&#125;<\/span>\n&#160;\n        <span style=\"color: #66cc66;\">&#125;<\/span> <span style=\"color: #b1b100;\">else<\/span> <span style=\"color: #66cc66;\">&#123;<\/span>\n            <span style=\"color: #808080; font-style: italic;\">\/\/ Otherwise we need to launch a new activity to display<\/span>\n            <span style=\"color: #808080; font-style: italic;\">\/\/ the dialog fragment with selected text.<\/span>\n            Intent intent = <span style=\"color: #000000; font-weight: bold;\">new<\/span> Intent<span style=\"color: #66cc66;\">&#40;<\/span><span style=\"color: #66cc66;\">&#41;<\/span>;\n            intent.<span style=\"color: #006600;\">setClass<\/span><span style=\"color: #66cc66;\">&#40;<\/span>getActivity<span style=\"color: #66cc66;\">&#40;<\/span><span style=\"color: #66cc66;\">&#41;<\/span>, DetailsActivity.<span style=\"color: #000000; font-weight: bold;\">class<\/span><span style=\"color: #66cc66;\">&#41;<\/span>;\n            intent.<span style=\"color: #006600;\">putExtra<\/span><span style=\"color: #66cc66;\">&#40;<\/span><span style=\"color: #ff0000;\">&quot;index&quot;<\/span>, index<span style=\"color: #66cc66;\">&#41;<\/span>;\n            startActivity<span style=\"color: #66cc66;\">&#40;<\/span>intent<span style=\"color: #66cc66;\">&#41;<\/span>;\n        <span style=\"color: #66cc66;\">&#125;<\/span>\n    <span style=\"color: #66cc66;\">&#125;<\/span>\n<span style=\"color: #66cc66;\">&#125;<\/span>\n&#160;<\/pre>\n<p>The second fragment, DetailsFragment shows the play summary for the item selected from the list from TitlesFragment:\n<\/p><p>\u7b2c\u4e8c\u4e2aFragment,DetailsFragment\u663e\u793a\u4e86\u5728TitleFragment\u4e2d\u9009\u4e2d\u7684\u8bdd\u5267\u7b80\u4ecb.\n<\/p>\n<pre class=\"java\">&#160;\n<span style=\"color: #000000; font-weight: bold;\">public<\/span> <span style=\"color: #000000; font-weight: bold;\">static<\/span> <span style=\"color: #000000; font-weight: bold;\">class<\/span> DetailsFragment <span style=\"color: #000000; font-weight: bold;\">extends<\/span> Fragment <span style=\"color: #66cc66;\">&#123;<\/span>\n    <span style=\"color: #808080; font-style: italic;\">\/**\n     * Create a new instance of DetailsFragment, initialized to\n     * show the text at 'index'.\n     *\/<\/span>\n    <span style=\"color: #000000; font-weight: bold;\">public<\/span> <span style=\"color: #000000; font-weight: bold;\">static<\/span> DetailsFragment newInstance<span style=\"color: #66cc66;\">&#40;<\/span><span style=\"color: #993333;\">int<\/span> index<span style=\"color: #66cc66;\">&#41;<\/span> <span style=\"color: #66cc66;\">&#123;<\/span>\n        DetailsFragment f = <span style=\"color: #000000; font-weight: bold;\">new<\/span> DetailsFragment<span style=\"color: #66cc66;\">&#40;<\/span><span style=\"color: #66cc66;\">&#41;<\/span>;\n&#160;\n        <span style=\"color: #808080; font-style: italic;\">\/\/ Supply index input as an argument.<\/span>\n        Bundle args = <span style=\"color: #000000; font-weight: bold;\">new<\/span> Bundle<span style=\"color: #66cc66;\">&#40;<\/span><span style=\"color: #66cc66;\">&#41;<\/span>;\n        args.<span style=\"color: #006600;\">putInt<\/span><span style=\"color: #66cc66;\">&#40;<\/span><span style=\"color: #ff0000;\">&quot;index&quot;<\/span>, index<span style=\"color: #66cc66;\">&#41;<\/span>;\n        f.<span style=\"color: #006600;\">setArguments<\/span><span style=\"color: #66cc66;\">&#40;<\/span>args<span style=\"color: #66cc66;\">&#41;<\/span>;\n&#160;\n        <span style=\"color: #000000; font-weight: bold;\">return<\/span> f;\n    <span style=\"color: #66cc66;\">&#125;<\/span>\n&#160;\n    <span style=\"color: #000000; font-weight: bold;\">public<\/span> <span style=\"color: #993333;\">int<\/span> getShownIndex<span style=\"color: #66cc66;\">&#40;<\/span><span style=\"color: #66cc66;\">&#41;<\/span> <span style=\"color: #66cc66;\">&#123;<\/span>\n        <span style=\"color: #000000; font-weight: bold;\">return<\/span> getArguments<span style=\"color: #66cc66;\">&#40;<\/span><span style=\"color: #66cc66;\">&#41;<\/span>.<span style=\"color: #006600;\">getInt<\/span><span style=\"color: #66cc66;\">&#40;<\/span><span style=\"color: #ff0000;\">&quot;index&quot;<\/span>, <span style=\"color: #cc66cc;\">0<\/span><span style=\"color: #66cc66;\">&#41;<\/span>;\n    <span style=\"color: #66cc66;\">&#125;<\/span>\n&#160;\n    @Override\n    <span style=\"color: #000000; font-weight: bold;\">public<\/span> <a href=\"http:\/\/www.google.com\/search?hl=en&amp;q=allinurl%3AView+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span style=\"color: #aaaadd; font-weight: bold;\">View<\/span><\/a> onCreateView<span style=\"color: #66cc66;\">&#40;<\/span>LayoutInflater inflater, ViewGroup container,\n            Bundle savedInstanceState<span style=\"color: #66cc66;\">&#41;<\/span> <span style=\"color: #66cc66;\">&#123;<\/span>\n        <span style=\"color: #b1b100;\">if<\/span> <span style=\"color: #66cc66;\">&#40;<\/span>container == <span style=\"color: #000000; font-weight: bold;\">null<\/span><span style=\"color: #66cc66;\">&#41;<\/span> <span style=\"color: #66cc66;\">&#123;<\/span>\n            <span style=\"color: #808080; font-style: italic;\">\/\/ We have different layouts, and in one of them this<\/span>\n            <span style=\"color: #808080; font-style: italic;\">\/\/ fragment's containing frame doesn't exist.  The fragment<\/span>\n            <span style=\"color: #808080; font-style: italic;\">\/\/ may still be created from its saved state, but there is<\/span>\n            <span style=\"color: #808080; font-style: italic;\">\/\/ no reason to try to create its view hierarchy because it<\/span>\n            <span style=\"color: #808080; font-style: italic;\">\/\/ won't be displayed.  Note this is not needed -- we could<\/span>\n            <span style=\"color: #808080; font-style: italic;\">\/\/ just run the code below, where we would create and return<\/span>\n            <span style=\"color: #808080; font-style: italic;\">\/\/ the view hierarchy; it would just never be used.<\/span>\n            <span style=\"color: #000000; font-weight: bold;\">return<\/span> <span style=\"color: #000000; font-weight: bold;\">null<\/span>;\n        <span style=\"color: #66cc66;\">&#125;<\/span>\n&#160;\n        ScrollView scroller = <span style=\"color: #000000; font-weight: bold;\">new<\/span> ScrollView<span style=\"color: #66cc66;\">&#40;<\/span>getActivity<span style=\"color: #66cc66;\">&#40;<\/span><span style=\"color: #66cc66;\">&#41;<\/span><span style=\"color: #66cc66;\">&#41;<\/span>;\n        TextView text = <span style=\"color: #000000; font-weight: bold;\">new<\/span> TextView<span style=\"color: #66cc66;\">&#40;<\/span>getActivity<span style=\"color: #66cc66;\">&#40;<\/span><span style=\"color: #66cc66;\">&#41;<\/span><span style=\"color: #66cc66;\">&#41;<\/span>;\n        <span style=\"color: #993333;\">int<\/span> padding = <span style=\"color: #66cc66;\">&#40;<\/span><span style=\"color: #993333;\">int<\/span><span style=\"color: #66cc66;\">&#41;<\/span>TypedValue.<span style=\"color: #006600;\">applyDimension<\/span><span style=\"color: #66cc66;\">&#40;<\/span>TypedValue.<span style=\"color: #006600;\">COMPLEX_UNIT_DIP<\/span>,\n                <span style=\"color: #cc66cc;\">4<\/span>, getActivity<span style=\"color: #66cc66;\">&#40;<\/span><span style=\"color: #66cc66;\">&#41;<\/span>.<span style=\"color: #006600;\">getResources<\/span><span style=\"color: #66cc66;\">&#40;<\/span><span style=\"color: #66cc66;\">&#41;<\/span>.<span style=\"color: #006600;\">getDisplayMetrics<\/span><span style=\"color: #66cc66;\">&#40;<\/span><span style=\"color: #66cc66;\">&#41;<\/span><span style=\"color: #66cc66;\">&#41;<\/span>;\n        text.<span style=\"color: #006600;\">setPadding<\/span><span style=\"color: #66cc66;\">&#40;<\/span>padding, padding, padding, padding<span style=\"color: #66cc66;\">&#41;<\/span>;\n        scroller.<span style=\"color: #006600;\">addView<\/span><span style=\"color: #66cc66;\">&#40;<\/span>text<span style=\"color: #66cc66;\">&#41;<\/span>;\n        text.<span style=\"color: #006600;\">setText<\/span><span style=\"color: #66cc66;\">&#40;<\/span>Shakespeare.<span style=\"color: #006600;\">DIALOGUE<\/span><span style=\"color: #66cc66;\">&#91;<\/span>getShownIndex<span style=\"color: #66cc66;\">&#40;<\/span><span style=\"color: #66cc66;\">&#41;<\/span><span style=\"color: #66cc66;\">&#93;<\/span><span style=\"color: #66cc66;\">&#41;<\/span>;\n        <span style=\"color: #000000; font-weight: bold;\">return<\/span> scroller;\n    <span style=\"color: #66cc66;\">&#125;<\/span>\n<span style=\"color: #66cc66;\">&#125;<\/span>\n&#160;<\/pre>\n<p>Recall from the TitlesFragment class, that, if the user clicks a list item and the current layout does not include the R.id.details view (which is where the DetailsFragment belongs), then the application starts the DetailsActivity activity to display the content of the item.\n<\/p><p>\u6765\u81eaTitleFragment\u7684\u8c03\u7528,\u5982\u679c\u7528\u6237\u70b9\u51fb\u5217\u8868\u9879\u7684\u65f6\u5019\u5f53\u524d\u5e03\u5c40\u4e0d\u5305\u542bR.id.details\u89c6\u56fe(DetailsFragment \u6240\u5728\u7684\u89c6\u56fe),\u90a3\u5e94\u7528\u5c06\u4f1a\u542f\u52a8DetailsActivity \u6765\u663e\u793a\u9009\u4e2d\u9879\u7684\u5185\u5bb9\u7b80\u4ecb.\n<\/p><p>Here is the DetailsActivity, which simply embeds the DetailsFragment to display the selected play summary when the screen is in portrait orientation:\n<\/p><p>\u8fd9\u91cc\u662fDetailsActivity,\u5728\u5c4f\u5e55\u662f\u7ad6\u5c4f\u7684\u65f6\u5019,\u7b80\u5355\u7684\u5d4c\u5165\u5728\u4e86Fragment\u4e2d\u6765\u663e\u793a\u9009\u4e2d\u7684\u8bdd\u5267\u7b80\u4ecb.\n<\/p>\n<pre class=\"java\">&#160;\n<span style=\"color: #000000; font-weight: bold;\">public<\/span> <span style=\"color: #000000; font-weight: bold;\">static<\/span> <span style=\"color: #000000; font-weight: bold;\">class<\/span> DetailsActivity <span style=\"color: #000000; font-weight: bold;\">extends<\/span> Activity <span style=\"color: #66cc66;\">&#123;<\/span>\n&#160;\n    @Override\n    <span style=\"color: #000000; font-weight: bold;\">protected<\/span> <span style=\"color: #993333;\">void<\/span> onCreate<span style=\"color: #66cc66;\">&#40;<\/span>Bundle savedInstanceState<span style=\"color: #66cc66;\">&#41;<\/span> <span style=\"color: #66cc66;\">&#123;<\/span>\n        <span style=\"color: #000000; font-weight: bold;\">super<\/span>.<span style=\"color: #006600;\">onCreate<\/span><span style=\"color: #66cc66;\">&#40;<\/span>savedInstanceState<span style=\"color: #66cc66;\">&#41;<\/span>;\n&#160;\n        <span style=\"color: #b1b100;\">if<\/span> <span style=\"color: #66cc66;\">&#40;<\/span>getResources<span style=\"color: #66cc66;\">&#40;<\/span><span style=\"color: #66cc66;\">&#41;<\/span>.<span style=\"color: #006600;\">getConfiguration<\/span><span style=\"color: #66cc66;\">&#40;<\/span><span style=\"color: #66cc66;\">&#41;<\/span>.<span style=\"color: #006600;\">orientation<\/span>\n                == Configuration.<span style=\"color: #006600;\">ORIENTATION_LANDSCAPE<\/span><span style=\"color: #66cc66;\">&#41;<\/span> <span style=\"color: #66cc66;\">&#123;<\/span>\n            <span style=\"color: #808080; font-style: italic;\">\/\/ If the screen is now in landscape mode, we can show the<\/span>\n            <span style=\"color: #808080; font-style: italic;\">\/\/ dialog in-line with the list so we don't need this activity.<\/span>\n            finish<span style=\"color: #66cc66;\">&#40;<\/span><span style=\"color: #66cc66;\">&#41;<\/span>;\n            <span style=\"color: #000000; font-weight: bold;\">return<\/span>;\n        <span style=\"color: #66cc66;\">&#125;<\/span>\n&#160;\n        <span style=\"color: #b1b100;\">if<\/span> <span style=\"color: #66cc66;\">&#40;<\/span>savedInstanceState == <span style=\"color: #000000; font-weight: bold;\">null<\/span><span style=\"color: #66cc66;\">&#41;<\/span> <span style=\"color: #66cc66;\">&#123;<\/span>\n            <span style=\"color: #808080; font-style: italic;\">\/\/ During initial setup, plug in the details fragment.<\/span>\n            DetailsFragment details = <span style=\"color: #000000; font-weight: bold;\">new<\/span> DetailsFragment<span style=\"color: #66cc66;\">&#40;<\/span><span style=\"color: #66cc66;\">&#41;<\/span>;\n            details.<span style=\"color: #006600;\">setArguments<\/span><span style=\"color: #66cc66;\">&#40;<\/span>getIntent<span style=\"color: #66cc66;\">&#40;<\/span><span style=\"color: #66cc66;\">&#41;<\/span>.<span style=\"color: #006600;\">getExtras<\/span><span style=\"color: #66cc66;\">&#40;<\/span><span style=\"color: #66cc66;\">&#41;<\/span><span style=\"color: #66cc66;\">&#41;<\/span>;\n            getFragmentManager<span style=\"color: #66cc66;\">&#40;<\/span><span style=\"color: #66cc66;\">&#41;<\/span>.<span style=\"color: #006600;\">beginTransaction<\/span><span style=\"color: #66cc66;\">&#40;<\/span><span style=\"color: #66cc66;\">&#41;<\/span>.<span style=\"color: #006600;\">add<\/span><span style=\"color: #66cc66;\">&#40;<\/span>android.<span style=\"color: #006600;\">R<\/span>.<span style=\"color: #006600;\">id<\/span>.<span style=\"color: #006600;\">content<\/span>, details<span style=\"color: #66cc66;\">&#41;<\/span>.<span style=\"color: #006600;\">commit<\/span><span style=\"color: #66cc66;\">&#40;<\/span><span style=\"color: #66cc66;\">&#41;<\/span>;\n        <span style=\"color: #66cc66;\">&#125;<\/span>\n    <span style=\"color: #66cc66;\">&#125;<\/span>\n<span style=\"color: #66cc66;\">&#125;<\/span>\n&#160;<\/pre>\n<p>Notice that this activity finishes itself if the configuration is landscape, so that the main activity can take over and display the DetailsFragment alongside the TitlesFragment. This can happen if the user begins the DetailsActivity while in portrait orientation, but then rotates to landscape (which restarts the current activity).\n<\/p><p>\u6ce8\u610factivity\u4f1a\u5728\u6a2a\u5c4f\u7684\u65f6\u5019\u7ed3\u675f\u81ea\u5df1,\u8fd9\u6837\u4e3bactivity\u53ef\u4ee5\u63a5\u7ba1\u5e76\u663e\u793aDetailsFragment\u65c1\u8fb9\u7684TitlesFragment.\u5982\u679c\u7528\u6237\u5728\u7ad6\u5c4f\u7684\u65f6\u5019\u542f\u52a8DetailsActivity,\u7136\u540e\u628a\u8bbe\u5907\u8f6c\u5230\u6a2a\u5c4f(\u5c06\u4f1a\u91cd\u542f\u5f53\u524d\u7684activity).\n<\/p><p><br \/>\nFor more samples using fragments (and complete source files for this example), see the API Demos sample app available in ApiDemos (available for download from the Samples SDK component).\n<\/p><p>\u66f4\u591a\u4f7f\u7528Fragment\u7684\u4f8b\u5b50(\u5305\u62ec\u8fd9\u4e2a\u4f8b\u5b50\u7684\u5168\u90e8\u4ee3\u7801),\u8bf7\u53c2\u8003API Demo(\u53ef\u4ee5\u5728SDK\u4f8b\u5b50\u90a3\u91cc\u4e0b\u8f7d).\n<\/p>"}